package org.point85.open62541;
import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Array;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
/**
 * <i>native declaration : open62541.h:1024</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("Open62541Ext") 
public class UA_DataType extends StructObject {
	static {
		BridJ.register();
	}
	/**
	 * < The nodeid of the type<br>
	 * C type : UA_NodeId
	 */
	@Field(0) 
	public UA_NodeId typeId() {
		return this.io.getNativeObjectField(this, 0);
	}
	/**
	 * < The nodeid of the type<br>
	 * C type : UA_NodeId
	 */
	@Field(0) 
	public UA_DataType typeId(UA_NodeId typeId) {
		this.io.setNativeObjectField(this, 0, typeId);
		return this;
	}
	/** < Size of the struct in memory */
	@Ptr 
	@Field(1) 
	public long memSize() {
		return this.io.getSizeTField(this, 1);
	}
	/** < Size of the struct in memory */
	@Ptr 
	@Field(1) 
	public UA_DataType memSize(long memSize) {
		this.io.setSizeTField(this, 1, memSize);
		return this;
	}
	/**
	 * < Index of the type in the datatypetable<br>
	 * C type : UA_UInt16
	 */
	@Field(2) 
	public short typeIndex() {
		return this.io.getShortField(this, 2);
	}
	/**
	 * < Index of the type in the datatypetable<br>
	 * C type : UA_UInt16
	 */
	@Field(2) 
	public UA_DataType typeIndex(short typeIndex) {
		this.io.setShortField(this, 2, typeIndex);
		return this;
	}
	/**
	 * < The type is defined in namespace zero<br>
	 * C type : UA_Boolean
	 */
	@Field(3) 
	public boolean namespaceZero() {
		return this.io.getBooleanField(this, 3);
	}
	/**
	 * < The type is defined in namespace zero<br>
	 * C type : UA_Boolean
	 */
	@Field(3) 
	public UA_DataType namespaceZero(boolean namespaceZero) {
		this.io.setBooleanField(this, 3, namespaceZero);
		return this;
	}
	/**
	 * < The type (and its members) contains no pointers<br>
	 * C type : UA_Boolean
	 */
	@Field(4) 
	public boolean fixedSize() {
		return this.io.getBooleanField(this, 4);
	}
	/**
	 * < The type (and its members) contains no pointers<br>
	 * C type : UA_Boolean
	 */
	@Field(4) 
	public UA_DataType fixedSize(boolean fixedSize) {
		this.io.setBooleanField(this, 4, fixedSize);
		return this;
	}
	/**
	 * < Can the type be copied directly off the stream?<br>
	 * C type : UA_Boolean
	 */
	@Field(5) 
	public boolean zeroCopyable() {
		return this.io.getBooleanField(this, 5);
	}
	/**
	 * < Can the type be copied directly off the stream?<br>
	 * C type : UA_Boolean
	 */
	@Field(5) 
	public UA_DataType zeroCopyable(boolean zeroCopyable) {
		this.io.setBooleanField(this, 5, zeroCopyable);
		return this;
	}
	/**
	 * < How many members does the type have?<br>
	 * C type : UA_Byte
	 */
	@Field(6) 
	public byte membersSize() {
		return this.io.getByteField(this, 6);
	}
	/**
	 * < How many members does the type have?<br>
	 * C type : UA_Byte
	 */
	@Field(6) 
	public UA_DataType membersSize(byte membersSize) {
		this.io.setByteField(this, 6, membersSize);
		return this;
	}
	/** C type : UA_DataTypeMember[13] */
	@Array({13}) 
	@Field(7) 
	public Pointer<UA_DataTypeMember > members() {
		return this.io.getPointerField(this, 7);
	}
	public UA_DataType() {
		super();
	}
	public UA_DataType(Pointer pointer) {
		super(pointer);
	}
}

package org.point85.open62541;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.point85.open62541.Open62541ExtLibrary.UA_StatusCode;
/**
 * <i>native declaration : open62541.h:2045</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("Open62541Ext") 
public class UA_DataSource extends StructObject {
	static {
		BridJ.register();
	}
	/**
	 * > A custom pointer to reuse the same datasource functions for multiple sources<br>
	 * C type : void*
	 */
	@Field(0) 
	public Pointer<? > handle() {
		return this.io.getPointerField(this, 0);
	}
	/**
	 * > A custom pointer to reuse the same datasource functions for multiple sources<br>
	 * C type : void*
	 */
	@Field(0) 
	public UA_DataSource handle(Pointer<? > handle) {
		this.io.setPointerField(this, 0, handle);
		return this;
	}
	/** C type : read_callback* */
	@Field(1) 
	public Pointer<UA_DataSource.read_callback > read() {
		return this.io.getPointerField(this, 1);
	}
	/** C type : read_callback* */
	@Field(1) 
	public UA_DataSource read(Pointer<UA_DataSource.read_callback > read) {
		this.io.setPointerField(this, 1, read);
		return this;
	}
	/** C type : release_callback* */
	@Field(2) 
	public Pointer<UA_DataSource.release_callback > release() {
		return this.io.getPointerField(this, 2);
	}
	/** C type : release_callback* */
	@Field(2) 
	public UA_DataSource release(Pointer<UA_DataSource.release_callback > release) {
		this.io.setPointerField(this, 2, release);
		return this;
	}
	/** C type : write_callback* */
	@Field(3) 
	public Pointer<UA_DataSource.write_callback > write() {
		return this.io.getPointerField(this, 3);
	}
	/** C type : write_callback* */
	@Field(3) 
	public UA_DataSource write(Pointer<UA_DataSource.write_callback > write) {
		this.io.setPointerField(this, 3, write);
		return this;
	}
	/** <i>native declaration : open62541.h:2042</i> */
	public static abstract class read_callback extends Callback<read_callback > {
		public IntValuedEnum<UA_StatusCode > apply(Pointer<? > handle, boolean includeSourceTimeStamp, Pointer<UA_NumericRange > range, Pointer<UA_DataValue > value) {
			return FlagSet.fromValue(apply(Pointer.getPeer(handle), includeSourceTimeStamp, Pointer.getPeer(range), Pointer.getPeer(value)), UA_StatusCode.class);
		}
		public int apply(@Ptr long handle, boolean includeSourceTimeStamp, @Ptr long range, @Ptr long value) {
			return (int)apply(Pointer.pointerToAddress(handle), includeSourceTimeStamp, (Pointer)Pointer.pointerToAddress(range, UA_NumericRange.class), (Pointer)Pointer.pointerToAddress(value, UA_DataValue.class)).value();
		}
	};
	/** <i>native declaration : open62541.h:2043</i> */
	public static abstract class release_callback extends Callback<release_callback > {
		public void apply(Pointer<? > handle, Pointer<UA_DataValue > value) {
			apply(Pointer.getPeer(handle), Pointer.getPeer(value));
		}
		public void apply(@Ptr long handle, @Ptr long value) {
			apply(Pointer.pointerToAddress(handle), (Pointer)Pointer.pointerToAddress(value, UA_DataValue.class));
		}
	};
	/** <i>native declaration : open62541.h:2044</i> */
	public static abstract class write_callback extends Callback<write_callback > {
		public IntValuedEnum<UA_StatusCode > apply(Pointer<? > handle, Pointer<UA_Variant > data, Pointer<UA_NumericRange > range) {
			return FlagSet.fromValue(apply(Pointer.getPeer(handle), Pointer.getPeer(data), Pointer.getPeer(range)), UA_StatusCode.class);
		}
		public int apply(@Ptr long handle, @Ptr long data, @Ptr long range) {
			return (int)apply(Pointer.pointerToAddress(handle), (Pointer)Pointer.pointerToAddress(data, UA_Variant.class), (Pointer)Pointer.pointerToAddress(range, UA_NumericRange.class)).value();
		}
	};
	public UA_DataSource() {
		super();
	}
	public UA_DataSource(Pointer pointer) {
		super(pointer);
	}
}

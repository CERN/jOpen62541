package org.point85.open62541;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Callback;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
import org.bridj.util.DefaultParameterizedType;
/**
 * Wrapper for library <b>Open62541Ext</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("Open62541Ext") 
@Runtime(CRuntime.class) 
public class Open62541ExtLibrary {
	static {
		BridJ.register();
	}
	/**
	 * amalgamated original file "/home/travis/build/acplt/open62541/include/ua_statuscodes.h" **********************************<br>
	 * enum values<br>
	 * <i>native declaration : open62541.h:435</i>
	 */
	public enum UA_StatusCode implements IntValuedEnum<UA_StatusCode > {
		UA_STATUSCODE_GOOD(0x00),
		/** An unexpected error occurred. */
		UA_STATUSCODE_BADUNEXPECTEDERROR(0x80010000),
		/** An internal error occurred as a result of a programming or configuration error. */
		UA_STATUSCODE_BADINTERNALERROR(0x80020000),
		/** Not enough memory to complete the operation. */
		UA_STATUSCODE_BADOUTOFMEMORY(0x80030000),
		/** An operating system resource is not available. */
		UA_STATUSCODE_BADRESOURCEUNAVAILABLE(0x80040000),
		/** A low level communication error occurred. */
		UA_STATUSCODE_BADCOMMUNICATIONERROR(0x80050000),
		/** Encoding halted because of invalid data in the objects being serialized. */
		UA_STATUSCODE_BADENCODINGERROR(0x80060000),
		/** Decoding halted because of invalid data in the stream. */
		UA_STATUSCODE_BADDECODINGERROR(0x80070000),
		/** The message encoding/decoding limits imposed by the stack have been exceeded. */
		UA_STATUSCODE_BADENCODINGLIMITSEXCEEDED(0x80080000),
		/** The request message size exceeds limits set by the server. */
		UA_STATUSCODE_BADREQUESTTOOLARGE(0x80b80000),
		/** The response message size exceeds limits set by the client. */
		UA_STATUSCODE_BADRESPONSETOOLARGE(0x80b90000),
		/** An unrecognized response was received from the server. */
		UA_STATUSCODE_BADUNKNOWNRESPONSE(0x80090000),
		/** The operation timed out. */
		UA_STATUSCODE_BADTIMEOUT(0x800a0000),
		/** The server does not support the requested service. */
		UA_STATUSCODE_BADSERVICEUNSUPPORTED(0x800b0000),
		/** The operation was cancelled because the application is shutting down. */
		UA_STATUSCODE_BADSHUTDOWN(0x800c0000),
		/** The operation could not complete because the client is not connected to the server. */
		UA_STATUSCODE_BADSERVERNOTCONNECTED(0x800d0000),
		/** The server has stopped and cannot process any requests. */
		UA_STATUSCODE_BADSERVERHALTED(0x800e0000),
		/** There was nothing to do because the client passed a list of operations with no elements. */
		UA_STATUSCODE_BADNOTHINGTODO(0x800f0000),
		/** The request could not be processed because it specified too many operations. */
		UA_STATUSCODE_BADTOOMANYOPERATIONS(0x80100000),
		/** The request could not be processed because there are too many monitored items in the subscription. */
		UA_STATUSCODE_BADTOOMANYMONITOREDITEMS(0x80db0000),
		/** The extension object cannot be (de)serialized because the data type id is not recognized. */
		UA_STATUSCODE_BADDATATYPEIDUNKNOWN(0x80110000),
		/** The certificate provided as a parameter is not valid. */
		UA_STATUSCODE_BADCERTIFICATEINVALID(0x80120000),
		/** An error occurred verifying security. */
		UA_STATUSCODE_BADSECURITYCHECKSFAILED(0x80130000),
		/** The Certificate has expired or is not yet valid. */
		UA_STATUSCODE_BADCERTIFICATETIMEINVALID(0x80140000),
		/** An Issuer Certificate has expired or is not yet valid. */
		UA_STATUSCODE_BADCERTIFICATEISSUERTIMEINVALID(0x80150000),
		/** The HostName used to connect to a Server does not match a HostName in the Certificate. */
		UA_STATUSCODE_BADCERTIFICATEHOSTNAMEINVALID(0x80160000),
		/** The URI specified in the ApplicationDescription does not match the URI in the Certificate. */
		UA_STATUSCODE_BADCERTIFICATEURIINVALID(0x80170000),
		/** The Certificate may not be used for the requested operation. */
		UA_STATUSCODE_BADCERTIFICATEUSENOTALLOWED(0x80180000),
		/** The Issuer Certificate may not be used for the requested operation. */
		UA_STATUSCODE_BADCERTIFICATEISSUERUSENOTALLOWED(0x80190000),
		/** The Certificate is not trusted. */
		UA_STATUSCODE_BADCERTIFICATEUNTRUSTED(0x801a0000),
		/** It was not possible to determine if the Certificate has been revoked. */
		UA_STATUSCODE_BADCERTIFICATEREVOCATIONUNKNOWN(0x801b0000),
		/** It was not possible to determine if the Issuer Certificate has been revoked. */
		UA_STATUSCODE_BADCERTIFICATEISSUERREVOCATIONUNKNOWN(0x801c0000),
		/** The Certificate has been revoked. */
		UA_STATUSCODE_BADCERTIFICATEREVOKED(0x801d0000),
		/** The Issuer Certificate has been revoked. */
		UA_STATUSCODE_BADCERTIFICATEISSUERREVOKED(0x801e0000),
		/** User does not have permission to perform the requested operation. */
		UA_STATUSCODE_BADUSERACCESSDENIED(0x801f0000),
		/** The user identity token is not valid. */
		UA_STATUSCODE_BADIDENTITYTOKENINVALID(0x80200000),
		/** The user identity token is valid but the server has rejected it. */
		UA_STATUSCODE_BADIDENTITYTOKENREJECTED(0x80210000),
		/** The specified secure channel is no longer valid. */
		UA_STATUSCODE_BADSECURECHANNELIDINVALID(0x80220000),
		/** The timestamp is outside the range allowed by the server. */
		UA_STATUSCODE_BADINVALIDTIMESTAMP(0x80230000),
		/** The nonce does appear to be not a random value or it is not the correct length. */
		UA_STATUSCODE_BADNONCEINVALID(0x80240000),
		/** The session id is not valid. */
		UA_STATUSCODE_BADSESSIONIDINVALID(0x80250000),
		/** The session was closed by the client. */
		UA_STATUSCODE_BADSESSIONCLOSED(0x80260000),
		/** The session cannot be used because ActivateSession has not been called. */
		UA_STATUSCODE_BADSESSIONNOTACTIVATED(0x80270000),
		/** The subscription id is not valid. */
		UA_STATUSCODE_BADSUBSCRIPTIONIDINVALID(0x80280000),
		/** The header for the request is missing or invalid. */
		UA_STATUSCODE_BADREQUESTHEADERINVALID(0x802a0000),
		/** The timestamps to return parameter is invalid. */
		UA_STATUSCODE_BADTIMESTAMPSTORETURNINVALID(0x802b0000),
		/** The request was cancelled by the client. */
		UA_STATUSCODE_BADREQUESTCANCELLEDBYCLIENT(0x802c0000),
		/** The subscription was transferred to another session. */
		UA_STATUSCODE_GOODSUBSCRIPTIONTRANSFERRED(0x002d0000),
		/** The processing will complete asynchronously. */
		UA_STATUSCODE_GOODCOMPLETESASYNCHRONOUSLY(0x002e0000),
		/** Sampling has slowed down due to resource limitations. */
		UA_STATUSCODE_GOODOVERLOAD(0x002f0000),
		/** The value written was accepted but was clamped. */
		UA_STATUSCODE_GOODCLAMPED(0x00300000),
		/** Communication with the data source is defined, but not established, and there is no last known value available. */
		UA_STATUSCODE_BADNOCOMMUNICATION(0x80310000),
		/** Waiting for the server to obtain values from the underlying data source. */
		UA_STATUSCODE_BADWAITINGFORINITIALDATA(0x80320000),
		/** The syntax of the node id is not valid. */
		UA_STATUSCODE_BADNODEIDINVALID(0x80330000),
		/** The node id refers to a node that does not exist in the server address space. */
		UA_STATUSCODE_BADNODEIDUNKNOWN(0x80340000),
		/** The attribute is not supported for the specified Node. */
		UA_STATUSCODE_BADATTRIBUTEIDINVALID(0x80350000),
		/** The syntax of the index range parameter is invalid. */
		UA_STATUSCODE_BADINDEXRANGEINVALID(0x80360000),
		/** No data exists within the range of indexes specified. */
		UA_STATUSCODE_BADINDEXRANGENODATA(0x80370000),
		/** The data encoding is invalid. */
		UA_STATUSCODE_BADDATAENCODINGINVALID(0x80380000),
		/** The server does not support the requested data encoding for the node. */
		UA_STATUSCODE_BADDATAENCODINGUNSUPPORTED(0x80390000),
		/** The access level does not allow reading or subscribing to the Node. */
		UA_STATUSCODE_BADNOTREADABLE(0x803a0000),
		/** The access level does not allow writing to the Node. */
		UA_STATUSCODE_BADNOTWRITABLE(0x803b0000),
		/** The value was out of range. */
		UA_STATUSCODE_BADOUTOFRANGE(0x803c0000),
		/** The requested operation is not supported. */
		UA_STATUSCODE_BADNOTSUPPORTED(0x803d0000),
		/** A requested item was not found or a search operation ended without success. */
		UA_STATUSCODE_BADNOTFOUND(0x803e0000),
		/** The object cannot be used because it has been deleted. */
		UA_STATUSCODE_BADOBJECTDELETED(0x803f0000),
		/** Requested operation is not implemented. */
		UA_STATUSCODE_BADNOTIMPLEMENTED(0x80400000),
		/** The monitoring mode is invalid. */
		UA_STATUSCODE_BADMONITORINGMODEINVALID(0x80410000),
		/** The monitoring item id does not refer to a valid monitored item. */
		UA_STATUSCODE_BADMONITOREDITEMIDINVALID(0x80420000),
		/** The monitored item filter parameter is not valid. */
		UA_STATUSCODE_BADMONITOREDITEMFILTERINVALID(0x80430000),
		/** The server does not support the requested monitored item filter. */
		UA_STATUSCODE_BADMONITOREDITEMFILTERUNSUPPORTED(0x80440000),
		/** A monitoring filter cannot be used in combination with the attribute specified. */
		UA_STATUSCODE_BADFILTERNOTALLOWED(0x80450000),
		/** A mandatory structured parameter was missing or null. */
		UA_STATUSCODE_BADSTRUCTUREMISSING(0x80460000),
		/** The event filter is not valid. */
		UA_STATUSCODE_BADEVENTFILTERINVALID(0x80470000),
		/** The content filter is not valid. */
		UA_STATUSCODE_BADCONTENTFILTERINVALID(0x80480000),
		/** An unregognized operator was provided in a filter. */
		UA_STATUSCODE_BADFILTEROPERATORINVALID(0x80c10000),
		/** A valid operator was provided, but the server does not provide support for this filter operator. */
		UA_STATUSCODE_BADFILTEROPERATORUNSUPPORTED(0x80c20000),
		/** The number of operands provided for the filter operator was less then expected for the operand provided. */
		UA_STATUSCODE_BADFILTEROPERANDCOUNTMISMATCH(0x80c30000),
		/** The operand used in a content filter is not valid. */
		UA_STATUSCODE_BADFILTEROPERANDINVALID(0x80490000),
		/** The referenced element is not a valid element in the content filter. */
		UA_STATUSCODE_BADFILTERELEMENTINVALID(0x80c40000),
		/** The referenced literal is not a valid value. */
		UA_STATUSCODE_BADFILTERLITERALINVALID(0x80c50000),
		/** The continuation point provide is longer valid. */
		UA_STATUSCODE_BADCONTINUATIONPOINTINVALID(0x804a0000),
		/** The operation could not be processed because all continuation points have been allocated. */
		UA_STATUSCODE_BADNOCONTINUATIONPOINTS(0x804b0000),
		/** The operation could not be processed because all continuation points have been allocated. */
		UA_STATUSCODE_BADREFERENCETYPEIDINVALID(0x804c0000),
		/** The browse direction is not valid. */
		UA_STATUSCODE_BADBROWSEDIRECTIONINVALID(0x804d0000),
		/** The node is not part of the view. */
		UA_STATUSCODE_BADNODENOTINVIEW(0x804e0000),
		/** The ServerUri is not a valid URI. */
		UA_STATUSCODE_BADSERVERURIINVALID(0x804f0000),
		/** No ServerName was specified. */
		UA_STATUSCODE_BADSERVERNAMEMISSING(0x80500000),
		/** No DiscoveryUrl was specified. */
		UA_STATUSCODE_BADDISCOVERYURLMISSING(0x80510000),
		/** The semaphore file specified by the client is not valid. */
		UA_STATUSCODE_BADSEMPAHOREFILEMISSING(0x80520000),
		/** The security token request type is not valid. */
		UA_STATUSCODE_BADREQUESTTYPEINVALID(0x80530000),
		/** The security mode does not meet the requirements set by the Server. */
		UA_STATUSCODE_BADSECURITYMODEREJECTED(0x80540000),
		/** The security policy does not meet the requirements set by the Server. */
		UA_STATUSCODE_BADSECURITYPOLICYREJECTED(0x80550000),
		/** The server has reached its maximum number of sessions. */
		UA_STATUSCODE_BADTOOMANYSESSIONS(0x80560000),
		/** The user token signature is missing or invalid. */
		UA_STATUSCODE_BADUSERSIGNATUREINVALID(0x80570000),
		/** The signature generated with the client certificate is missing or invalid. */
		UA_STATUSCODE_BADAPPLICATIONSIGNATUREINVALID(0x80580000),
		/** The client did not provide at least one software certificate that is valid and meets the profile requirements for the server. */
		UA_STATUSCODE_BADNOVALIDCERTIFICATES(0x80590000),
		/** The Server does not support changing the user identity assigned to the session. */
		UA_STATUSCODE_BADIDENTITYCHANGENOTSUPPORTED(0x80c60000),
		/** The request was cancelled by the client with the Cancel service. */
		UA_STATUSCODE_BADREQUESTCANCELLEDBYREQUEST(0x805a0000),
		/** The parent node id does not to refer to a valid node. */
		UA_STATUSCODE_BADPARENTNODEIDINVALID(0x805b0000),
		/** The reference could not be created because it violates constraints imposed by the data model. */
		UA_STATUSCODE_BADREFERENCENOTALLOWED(0x805c0000),
		/** The requested node id was reject because it was either invalid or server does not allow node ids to be specified by the client. */
		UA_STATUSCODE_BADNODEIDREJECTED(0x805d0000),
		/** The requested node id is already used by another node. */
		UA_STATUSCODE_BADNODEIDEXISTS(0x805e0000),
		/** The node class is not valid. */
		UA_STATUSCODE_BADNODECLASSINVALID(0x805f0000),
		/** The browse name is invalid. */
		UA_STATUSCODE_BADBROWSENAMEINVALID(0x80600000),
		/** The browse name is not unique among nodes that share the same relationship with the parent. */
		UA_STATUSCODE_BADBROWSENAMEDUPLICATED(0x80610000),
		/** The node attributes are not valid for the node class. */
		UA_STATUSCODE_BADNODEATTRIBUTESINVALID(0x80620000),
		/** The type definition node id does not reference an appropriate type node. */
		UA_STATUSCODE_BADTYPEDEFINITIONINVALID(0x80630000),
		/** The source node id does not reference a valid node. */
		UA_STATUSCODE_BADSOURCENODEIDINVALID(0x80640000),
		/** The target node id does not reference a valid node. */
		UA_STATUSCODE_BADTARGETNODEIDINVALID(0x80650000),
		/** The reference type between the nodes is already defined. */
		UA_STATUSCODE_BADDUPLICATEREFERENCENOTALLOWED(0x80660000),
		/** The server does not allow this type of self reference on this node. */
		UA_STATUSCODE_BADINVALIDSELFREFERENCE(0x80670000),
		/** The reference type is not valid for a reference to a remote server. */
		UA_STATUSCODE_BADREFERENCELOCALONLY(0x80680000),
		/** The server will not allow the node to be deleted. */
		UA_STATUSCODE_BADNODELETERIGHTS(0x80690000),
		/** The server was not able to delete all target references. */
		UA_STATUSCODE_UNCERTAINREFERENCENOTDELETED(0x40bc0000),
		/** The server index is not valid. */
		UA_STATUSCODE_BADSERVERINDEXINVALID(0x806a0000),
		/** The view id does not refer to a valid view node. */
		UA_STATUSCODE_BADVIEWIDUNKNOWN(0x806b0000),
		/** The view timestamp is not available or not supported. */
		UA_STATUSCODE_BADVIEWTIMESTAMPINVALID(0x80c90000),
		/** The view parameters are not consistent with each other. */
		UA_STATUSCODE_BADVIEWPARAMETERMISMATCH(0x80ca0000),
		/** The view version is not available or not supported. */
		UA_STATUSCODE_BADVIEWVERSIONINVALID(0x80cb0000),
		/** The list of references may not be complete because the underlying system is not available. */
		UA_STATUSCODE_UNCERTAINNOTALLNODESAVAILABLE(0x40c00000),
		/** The server should have followed a reference to a node in a remote server but did not. The result set may be incomplete. */
		UA_STATUSCODE_GOODRESULTSMAYBEINCOMPLETE(0x00ba0000),
		/** The provided Nodeid was not a type definition nodeid. */
		UA_STATUSCODE_BADNOTTYPEDEFINITION(0x80c80000),
		/** One of the references to follow in the relative path references to a node in the address space in another server. */
		UA_STATUSCODE_UNCERTAINREFERENCEOUTOFSERVER(0x406c0000),
		/** The requested operation has too many matches to return. */
		UA_STATUSCODE_BADTOOMANYMATCHES(0x806d0000),
		/** The requested operation requires too many resources in the server. */
		UA_STATUSCODE_BADQUERYTOOCOMPLEX(0x806e0000),
		/** The requested operation has no match to return. */
		UA_STATUSCODE_BADNOMATCH(0x806f0000),
		/** The max age parameter is invalid. */
		UA_STATUSCODE_BADMAXAGEINVALID(0x80700000),
		/** The history details parameter is not valid. */
		UA_STATUSCODE_BADHISTORYOPERATIONINVALID(0x80710000),
		/** The server does not support the requested operation. */
		UA_STATUSCODE_BADHISTORYOPERATIONUNSUPPORTED(0x80720000),
		/** The defined timestamp to return was invalid. */
		UA_STATUSCODE_BADINVALIDTIMESTAMPARGUMENT(0x80bd0000),
		/** The server not does support writing the combination of value, status and timestamps provided. */
		UA_STATUSCODE_BADWRITENOTSUPPORTED(0x80730000),
		/** The value supplied for the attribute is not of the same type as the attribute's value. */
		UA_STATUSCODE_BADTYPEMISMATCH(0x80740000),
		/** The method id does not refer to a method for the specified object. */
		UA_STATUSCODE_BADMETHODINVALID(0x80750000),
		/** The client did not specify all of the input arguments for the method. */
		UA_STATUSCODE_BADARGUMENTSMISSING(0x80760000),
		/** The server has reached its  maximum number of subscriptions. */
		UA_STATUSCODE_BADTOOMANYSUBSCRIPTIONS(0x80770000),
		/** The server has reached the maximum number of queued publish requests. */
		UA_STATUSCODE_BADTOOMANYPUBLISHREQUESTS(0x80780000),
		/** There is no subscription available for this session. */
		UA_STATUSCODE_BADNOSUBSCRIPTION(0x80790000),
		/** The sequence number is unknown to the server. */
		UA_STATUSCODE_BADSEQUENCENUMBERUNKNOWN(0x807a0000),
		/** The requested notification message is no longer available. */
		UA_STATUSCODE_BADMESSAGENOTAVAILABLE(0x807b0000),
		/** The Client of the current Session does not support one or more Profiles that are necessary for the Subscription. */
		UA_STATUSCODE_BADINSUFFICIENTCLIENTPROFILE(0x807c0000),
		/** The sub-state machine is not currently active. */
		UA_STATUSCODE_BADSTATENOTACTIVE(0x80bf0000),
		/** The server cannot process the request because it is too busy. */
		UA_STATUSCODE_BADTCPSERVERTOOBUSY(0x807d0000),
		/** The type of the message specified in the header invalid. */
		UA_STATUSCODE_BADTCPMESSAGETYPEINVALID(0x807e0000),
		/** The SecureChannelId and/or TokenId are not currently in use. */
		UA_STATUSCODE_BADTCPSECURECHANNELUNKNOWN(0x807f0000),
		/** The size of the message specified in the header is too large. */
		UA_STATUSCODE_BADTCPMESSAGETOOLARGE(0x80800000),
		/** There are not enough resources to process the request. */
		UA_STATUSCODE_BADTCPNOTENOUGHRESOURCES(0x80810000),
		/** An internal error occurred. */
		UA_STATUSCODE_BADTCPINTERNALERROR(0x80820000),
		/** The Server does not recognize the QueryString specified. */
		UA_STATUSCODE_BADTCPENDPOINTURLINVALID(0x80830000),
		/** The request could not be sent because of a network interruption. */
		UA_STATUSCODE_BADREQUESTINTERRUPTED(0x80840000),
		/** Timeout occurred while processing the request. */
		UA_STATUSCODE_BADREQUESTTIMEOUT(0x80850000),
		/** The secure channel has been closed. */
		UA_STATUSCODE_BADSECURECHANNELCLOSED(0x80860000),
		/** The token has expired or is not recognized. */
		UA_STATUSCODE_BADSECURECHANNELTOKENUNKNOWN(0x80870000),
		/** The sequence number is not valid. */
		UA_STATUSCODE_BADSEQUENCENUMBERINVALID(0x80880000),
		/** The applications do not have compatible protocol versions. */
		UA_STATUSCODE_BADPROTOCOLVERSIONUNSUPPORTED(0x80be0000),
		/** There is a problem with the configuration that affects the usefulness of the value. */
		UA_STATUSCODE_BADCONFIGURATIONERROR(0x80890000),
		/** The variable should receive its value from another variable, but has never been configured to do so. */
		UA_STATUSCODE_BADNOTCONNECTED(0x808a0000),
		/** There has been a failure in the device/data source that generates the value that has affected the value. */
		UA_STATUSCODE_BADDEVICEFAILURE(0x808b0000),
		/** There has been a failure in the sensor from which the value is derived by the device/data source. */
		UA_STATUSCODE_BADSENSORFAILURE(0x808c0000),
		/** The source of the data is not operational. */
		UA_STATUSCODE_BADOUTOFSERVICE(0x808d0000),
		/** The deadband filter is not valid. */
		UA_STATUSCODE_BADDEADBANDFILTERINVALID(0x808e0000),
		/** Communication to the data source has failed. The variable value is the last value that had a good quality. */
		UA_STATUSCODE_UNCERTAINNOCOMMUNICATIONLASTUSABLEVALUE(0x408f0000),
		/** Whatever was updating this value has stopped doing so. */
		UA_STATUSCODE_UNCERTAINLASTUSABLEVALUE(0x40900000),
		/** The value is an operational value that was manually overwritten. */
		UA_STATUSCODE_UNCERTAINSUBSTITUTEVALUE(0x40910000),
		/** The value is an initial value for a variable that normally receives its value from another variable. */
		UA_STATUSCODE_UNCERTAININITIALVALUE(0x40920000),
		/** The value is at one of the sensor limits. */
		UA_STATUSCODE_UNCERTAINSENSORNOTACCURATE(0x40930000),
		/** The value is outside of the range of values defined for this parameter. */
		UA_STATUSCODE_UNCERTAINENGINEERINGUNITSEXCEEDED(0x40940000),
		/** The value is derived from multiple sources and has less than the required number of Good sources. */
		UA_STATUSCODE_UNCERTAINSUBNORMAL(0x40950000),
		/** The value has been overridden. */
		UA_STATUSCODE_GOODLOCALOVERRIDE(0x00960000),
		/** This Condition refresh failed, a Condition refresh operation is already in progress. */
		UA_STATUSCODE_BADREFRESHINPROGRESS(0x80970000),
		/** This condition has already been disabled. */
		UA_STATUSCODE_BADCONDITIONALREADYDISABLED(0x80980000),
		/** This condition has already been enabled. */
		UA_STATUSCODE_BADCONDITIONALREADYENABLED(0x80cc0000),
		/** Property not available, this condition is disabled. */
		UA_STATUSCODE_BADCONDITIONDISABLED(0x80990000),
		/** The specified event id is not recognized. */
		UA_STATUSCODE_BADEVENTIDUNKNOWN(0x809a0000),
		/** The event cannot be acknowledged. */
		UA_STATUSCODE_BADEVENTNOTACKNOWLEDGEABLE(0x80bb0000),
		/** The dialog condition is not active. */
		UA_STATUSCODE_BADDIALOGNOTACTIVE(0x80cd0000),
		/** The response is not valid for the dialog. */
		UA_STATUSCODE_BADDIALOGRESPONSEINVALID(0x80ce0000),
		/** The condition branch has already been acknowledged. */
		UA_STATUSCODE_BADCONDITIONBRANCHALREADYACKED(0x80cf0000),
		/** The condition branch has already been confirmed. */
		UA_STATUSCODE_BADCONDITIONBRANCHALREADYCONFIRMED(0x80d00000),
		/** The condition has already been shelved. */
		UA_STATUSCODE_BADCONDITIONALREADYSHELVED(0x80d10000),
		/** The condition is not currently shelved. */
		UA_STATUSCODE_BADCONDITIONNOTSHELVED(0x80d20000),
		/** The shelving time not within an acceptable range. */
		UA_STATUSCODE_BADSHELVINGTIMEOUTOFRANGE(0x80d30000),
		/** No data exists for the requested time range or event filter. */
		UA_STATUSCODE_BADNODATA(0x809b0000),
		/** No data found to provide upper or lower bound value. */
		UA_STATUSCODE_BADBOUNDNOTFOUND(0x80d70000),
		/** The server cannot retrieve a bound for the variable. */
		UA_STATUSCODE_BADBOUNDNOTSUPPORTED(0x80d80000),
		/** Data is missing due to collection started/stopped/lost. */
		UA_STATUSCODE_BADDATALOST(0x809d0000),
		/** Expected data is unavailable for the requested time range due to an un-mounted volume, an off-line archive or tape, or similar reason for temporary unavailability. */
		UA_STATUSCODE_BADDATAUNAVAILABLE(0x809e0000),
		/** The data or event was not successfully inserted because a matching entry exists. */
		UA_STATUSCODE_BADENTRYEXISTS(0x809f0000),
		/** The data or event was not successfully updated because no matching entry exists. */
		UA_STATUSCODE_BADNOENTRYEXISTS(0x80a00000),
		/** The client requested history using a timestamp format the server does not support (i.e requested ServerTimestamp when server only supports SourceTimestamp). */
		UA_STATUSCODE_BADTIMESTAMPNOTSUPPORTED(0x80a10000),
		/** The data or event was successfully inserted into the historical database. */
		UA_STATUSCODE_GOODENTRYINSERTED(0x00a20000),
		/** The data or event field was successfully replaced in the historical database. */
		UA_STATUSCODE_GOODENTRYREPLACED(0x00a30000),
		/** The value is derived from multiple values and has less than the required number of Good values. */
		UA_STATUSCODE_UNCERTAINDATASUBNORMAL(0x40a40000),
		/** No data exists for the requested time range or event filter. */
		UA_STATUSCODE_GOODNODATA(0x00a50000),
		/** The data or event field was successfully replaced in the historical database. */
		UA_STATUSCODE_GOODMOREDATA(0x00a60000),
		/** The requested number of Aggregates does not match the requested number of NodeIds. */
		UA_STATUSCODE_BADAGGREGATELISTMISMATCH(0x80d40000),
		/** The requested Aggregate is not support by the server. */
		UA_STATUSCODE_BADAGGREGATENOTSUPPORTED(0x80d50000),
		/** The aggregate value could not be derived due to invalid data inputs. */
		UA_STATUSCODE_BADAGGREGATEINVALIDINPUTS(0x80d60000),
		/** The aggregate configuration is not valid for specified node. */
		UA_STATUSCODE_BADAGGREGATECONFIGURATIONREJECTED(0x80da0000),
		/** The request pecifies fields which are not valid for the EventType or cannot be saved by the historian. */
		UA_STATUSCODE_GOODDATAIGNORED(0x00d90000),
		/** The communication layer has raised an event. */
		UA_STATUSCODE_GOODCOMMUNICATIONEVENT(0x00a70000),
		/** The system is shutting down. */
		UA_STATUSCODE_GOODSHUTDOWNEVENT(0x00a80000),
		/** The operation is not finished and needs to be called again. */
		UA_STATUSCODE_GOODCALLAGAIN(0x00a90000),
		/** A non-critical timeout occurred. */
		UA_STATUSCODE_GOODNONCRITICALTIMEOUT(0x00aa0000),
		/** One or more arguments are invalid. */
		UA_STATUSCODE_BADINVALIDARGUMENT(0x80ab0000),
		/** Could not establish a network connection to remote server. */
		UA_STATUSCODE_BADCONNECTIONREJECTED(0x80ac0000),
		/** The server has disconnected from the client. */
		UA_STATUSCODE_BADDISCONNECT(0x80ad0000),
		/** The network connection has been closed. */
		UA_STATUSCODE_BADCONNECTIONCLOSED(0x80ae0000),
		/** The operation cannot be completed because the object is closed, uninitialized or in some other invalid state. */
		UA_STATUSCODE_BADINVALIDSTATE(0x80af0000),
		/** Cannot move beyond end of the stream. */
		UA_STATUSCODE_BADENDOFSTREAM(0x80b00000),
		/** No data is currently available for reading from a non-blocking stream. */
		UA_STATUSCODE_BADNODATAAVAILABLE(0x80b10000),
		/** The asynchronous operation is waiting for a response. */
		UA_STATUSCODE_BADWAITINGFORRESPONSE(0x80b20000),
		/** The asynchronous operation was abandoned by the caller. */
		UA_STATUSCODE_BADOPERATIONABANDONED(0x80b30000),
		/** The stream did not return all data requested (possibly because it is a non-blocking stream). */
		UA_STATUSCODE_BADEXPECTEDSTREAMTOBLOCK(0x80b40000),
		/** Non blocking behaviour is required and the operation would block. */
		UA_STATUSCODE_BADWOULDBLOCK(0x80b50000),
		/** A value had an invalid syntax. */
		UA_STATUSCODE_BADSYNTAXERROR(0x80b60000),
		/** The operation could not be finished because all available connections are in use. */
		UA_STATUSCODE_BADMAXCONNECTIONSREACHED(0x80b70000);
		UA_StatusCode(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<UA_StatusCode > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<UA_StatusCode > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : open62541.h:1114</i>
	 */
	public enum UA_AttributeId implements IntValuedEnum<UA_AttributeId > {
		UA_ATTRIBUTEID_NODEID(1),
		UA_ATTRIBUTEID_NODECLASS(2),
		UA_ATTRIBUTEID_BROWSENAME(3),
		UA_ATTRIBUTEID_DISPLAYNAME(4),
		UA_ATTRIBUTEID_DESCRIPTION(5),
		UA_ATTRIBUTEID_WRITEMASK(6),
		UA_ATTRIBUTEID_USERWRITEMASK(7),
		UA_ATTRIBUTEID_ISABSTRACT(8),
		UA_ATTRIBUTEID_SYMMETRIC(9),
		UA_ATTRIBUTEID_INVERSENAME(10),
		UA_ATTRIBUTEID_CONTAINSNOLOOPS(11),
		UA_ATTRIBUTEID_EVENTNOTIFIER(12),
		UA_ATTRIBUTEID_VALUE(13),
		UA_ATTRIBUTEID_DATATYPE(14),
		UA_ATTRIBUTEID_VALUERANK(15),
		UA_ATTRIBUTEID_ARRAYDIMENSIONS(16),
		UA_ATTRIBUTEID_ACCESSLEVEL(17),
		UA_ATTRIBUTEID_USERACCESSLEVEL(18),
		UA_ATTRIBUTEID_MINIMUMSAMPLINGINTERVAL(19),
		UA_ATTRIBUTEID_HISTORIZING(20),
		UA_ATTRIBUTEID_EXECUTABLE(21),
		UA_ATTRIBUTEID_USEREXECUTABLE(22);
		UA_AttributeId(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<UA_AttributeId > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<UA_AttributeId > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : open62541.h:1130</i>
	 */
	public enum UA_IdType implements IntValuedEnum<UA_IdType > {
		UA_IDTYPE_NUMERIC(0),
		UA_IDTYPE_STRING(1),
		UA_IDTYPE_GUID(2),
		UA_IDTYPE_OPAQUE(3);
		UA_IdType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<UA_IdType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<UA_IdType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : open62541.h:1142</i>
	 */
	public enum UA_NodeClass implements IntValuedEnum<UA_NodeClass > {
		UA_NODECLASS_UNSPECIFIED(0),
		UA_NODECLASS_OBJECT(1),
		UA_NODECLASS_VARIABLE(2),
		UA_NODECLASS_METHOD(4),
		UA_NODECLASS_OBJECTTYPE(8),
		UA_NODECLASS_VARIABLETYPE(16),
		UA_NODECLASS_REFERENCETYPE(32),
		UA_NODECLASS_DATATYPE(64),
		UA_NODECLASS_VIEW(128);
		UA_NodeClass(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<UA_NodeClass > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<UA_NodeClass > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : open62541.h:1155</i>
	 */
	public enum UA_ApplicationType implements IntValuedEnum<UA_ApplicationType > {
		UA_APPLICATIONTYPE_SERVER(0),
		UA_APPLICATIONTYPE_CLIENT(1),
		UA_APPLICATIONTYPE_CLIENTANDSERVER(2),
		UA_APPLICATIONTYPE_DISCOVERYSERVER(3);
		UA_ApplicationType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<UA_ApplicationType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<UA_ApplicationType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : open62541.h:1212</i>
	 */
	public enum UA_MessageSecurityMode implements IntValuedEnum<UA_MessageSecurityMode > {
		UA_MESSAGESECURITYMODE_INVALID(0),
		UA_MESSAGESECURITYMODE_NONE(1),
		UA_MESSAGESECURITYMODE_SIGN(2),
		UA_MESSAGESECURITYMODE_SIGNANDENCRYPT(3);
		UA_MessageSecurityMode(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<UA_MessageSecurityMode > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<UA_MessageSecurityMode > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : open62541.h:1219</i>
	 */
	public enum UA_UserTokenType implements IntValuedEnum<UA_UserTokenType > {
		UA_USERTOKENTYPE_ANONYMOUS(0),
		UA_USERTOKENTYPE_USERNAME(1),
		UA_USERTOKENTYPE_CERTIFICATE(2),
		UA_USERTOKENTYPE_ISSUEDTOKEN(3);
		UA_UserTokenType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<UA_UserTokenType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<UA_UserTokenType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : open62541.h:1259</i>
	 */
	public enum UA_SecurityTokenRequestType implements IntValuedEnum<UA_SecurityTokenRequestType > {
		UA_SECURITYTOKENREQUESTTYPE_ISSUE(0),
		UA_SECURITYTOKENREQUESTTYPE_RENEW(1);
		UA_SecurityTokenRequestType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<UA_SecurityTokenRequestType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<UA_SecurityTokenRequestType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : open62541.h:1406</i>
	 */
	public enum UA_NodeAttributesMask implements IntValuedEnum<UA_NodeAttributesMask > {
		UA_NODEATTRIBUTESMASK_NONE(0),
		UA_NODEATTRIBUTESMASK_ACCESSLEVEL(1),
		UA_NODEATTRIBUTESMASK_ARRAYDIMENSIONS(2),
		UA_NODEATTRIBUTESMASK_BROWSENAME(4),
		UA_NODEATTRIBUTESMASK_CONTAINSNOLOOPS(8),
		UA_NODEATTRIBUTESMASK_DATATYPE(16),
		UA_NODEATTRIBUTESMASK_DESCRIPTION(32),
		UA_NODEATTRIBUTESMASK_DISPLAYNAME(64),
		UA_NODEATTRIBUTESMASK_EVENTNOTIFIER(128),
		UA_NODEATTRIBUTESMASK_EXECUTABLE(256),
		UA_NODEATTRIBUTESMASK_HISTORIZING(512),
		UA_NODEATTRIBUTESMASK_INVERSENAME(1024),
		UA_NODEATTRIBUTESMASK_ISABSTRACT(2048),
		UA_NODEATTRIBUTESMASK_MINIMUMSAMPLINGINTERVAL(4096),
		UA_NODEATTRIBUTESMASK_NODECLASS(8192),
		UA_NODEATTRIBUTESMASK_NODEID(16384),
		UA_NODEATTRIBUTESMASK_SYMMETRIC(32768),
		UA_NODEATTRIBUTESMASK_USERACCESSLEVEL(65536),
		UA_NODEATTRIBUTESMASK_USEREXECUTABLE(131072),
		UA_NODEATTRIBUTESMASK_USERWRITEMASK(262144),
		UA_NODEATTRIBUTESMASK_VALUERANK(524288),
		UA_NODEATTRIBUTESMASK_WRITEMASK(1048576),
		UA_NODEATTRIBUTESMASK_VALUE(2097152),
		UA_NODEATTRIBUTESMASK_ALL(4194303),
		UA_NODEATTRIBUTESMASK_BASENODE(1335396),
		UA_NODEATTRIBUTESMASK_OBJECT(1335524),
		UA_NODEATTRIBUTESMASK_OBJECTTYPEORDATATYPE(1337444),
		UA_NODEATTRIBUTESMASK_VARIABLE(4026999),
		UA_NODEATTRIBUTESMASK_VARIABLETYPE(3958902),
		UA_NODEATTRIBUTESMASK_METHOD(1466724),
		UA_NODEATTRIBUTESMASK_REFERENCETYPE(1371236),
		UA_NODEATTRIBUTESMASK_VIEW(1335532);
		UA_NodeAttributesMask(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<UA_NodeAttributesMask > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<UA_NodeAttributesMask > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : open62541.h:1569</i>
	 */
	public enum UA_BrowseDirection implements IntValuedEnum<UA_BrowseDirection > {
		UA_BROWSEDIRECTION_FORWARD(0),
		UA_BROWSEDIRECTION_INVERSE(1),
		UA_BROWSEDIRECTION_BOTH(2);
		UA_BrowseDirection(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<UA_BrowseDirection > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<UA_BrowseDirection > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : open62541.h:1597</i>
	 */
	public enum UA_BrowseResultMask implements IntValuedEnum<UA_BrowseResultMask > {
		UA_BROWSERESULTMASK_NONE(0),
		UA_BROWSERESULTMASK_REFERENCETYPEID(1),
		UA_BROWSERESULTMASK_ISFORWARD(2),
		UA_BROWSERESULTMASK_NODECLASS(4),
		UA_BROWSERESULTMASK_BROWSENAME(8),
		UA_BROWSERESULTMASK_DISPLAYNAME(16),
		UA_BROWSERESULTMASK_TYPEDEFINITION(32),
		UA_BROWSERESULTMASK_ALL(63),
		UA_BROWSERESULTMASK_REFERENCETYPEINFO(3),
		UA_BROWSERESULTMASK_TARGETINFO(60);
		UA_BrowseResultMask(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<UA_BrowseResultMask > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<UA_BrowseResultMask > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : open62541.h:1715</i>
	 */
	public enum UA_TimestampsToReturn implements IntValuedEnum<UA_TimestampsToReturn > {
		UA_TIMESTAMPSTORETURN_SOURCE(0),
		UA_TIMESTAMPSTORETURN_SERVER(1),
		UA_TIMESTAMPSTORETURN_BOTH(2),
		UA_TIMESTAMPSTORETURN_NEITHER(3);
		UA_TimestampsToReturn(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<UA_TimestampsToReturn > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<UA_TimestampsToReturn > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : open62541.h:1758</i>
	 */
	public enum UA_MonitoringMode implements IntValuedEnum<UA_MonitoringMode > {
		UA_MONITORINGMODE_DISABLED(0),
		UA_MONITORINGMODE_SAMPLING(1),
		UA_MONITORINGMODE_REPORTING(2);
		UA_MonitoringMode(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<UA_MonitoringMode > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<UA_MonitoringMode > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : open62541.h:1865</i>
	 */
	public enum UA_ServerState implements IntValuedEnum<UA_ServerState > {
		UA_SERVERSTATE_RUNNING(0),
		UA_SERVERSTATE_FAILED(1),
		UA_SERVERSTATE_NOCONFIGURATION(2),
		UA_SERVERSTATE_SUSPENDED(3),
		UA_SERVERSTATE_SHUTDOWN(4),
		UA_SERVERSTATE_TEST(5),
		UA_SERVERSTATE_COMMUNICATIONFAULT(6),
		UA_SERVERSTATE_UNKNOWN(7);
		UA_ServerState(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<UA_ServerState > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<UA_ServerState > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : open62541.h:1887</i>
	 */
	public enum UA_ConnectionState implements IntValuedEnum<UA_ConnectionState > {
		/** < The socket is open, but the HEL/ACK handshake is not done */
		UA_CONNECTION_OPENING(0),
		/** < The socket is open and the connection configured */
		UA_CONNECTION_ESTABLISHED(1),
		/** < The socket has been closed and the connection will be deleted */
		UA_CONNECTION_CLOSED(2);
		UA_ConnectionState(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<UA_ConnectionState > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<UA_ConnectionState > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : open62541.h:1960</i>
	 */
	public enum UA_LogLevel implements IntValuedEnum<UA_LogLevel > {
		UA_LOGLEVEL_TRACE(0),
		UA_LOGLEVEL_DEBUG(1),
		UA_LOGLEVEL_INFO(2),
		UA_LOGLEVEL_WARNING(3),
		UA_LOGLEVEL_ERROR(4),
		UA_LOGLEVEL_FATAL(5);
		UA_LogLevel(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<UA_LogLevel > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<UA_LogLevel > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : open62541.h:1966</i>
	 */
	public enum UA_LogCategory implements IntValuedEnum<UA_LogCategory > {
		UA_LOGCATEGORY_COMMUNICATION(0),
		UA_LOGCATEGORY_SERVER(1),
		UA_LOGCATEGORY_CLIENT(2),
		UA_LOGCATEGORY_USERLAND(3);
		UA_LogCategory(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<UA_LogCategory > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<UA_LogCategory > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_LOGLEVEL = (int)300;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_SBYTE_MAX = (int)127;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_SBYTE_MIN = (int)-128;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_BYTE_MAX = (int)256;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_BYTE_MIN = (int)0;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_INT16_MAX = (int)32767;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_INT16_MIN = (int)-32768;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_UINT16_MAX = (int)65535;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_UINT16_MIN = (int)0;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_INT32_MAX = (int)2147483647;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_INT32_MIN = (int)-2147483648;
	/** <i>native declaration : open62541.h</i> */
	public static final long UA_UINT32_MAX = (long)4294967295L;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_UINT32_MIN = (int)0;
	/** <i>native declaration : open62541.h</i> */
	public static final long UA_INT64_MAX = (long)9223372036854775807L;
	/** <i>native declaration : open62541.h</i> */
	public static final long UA_INT64_MIN = (long)-9223372036854775808L;
	/**
	 * define<br>
	 * Conversion Error : null<br>
	 * SKIPPED:<br>
	 * <i>native declaration : open62541.h</i><br>
	 * = 0
	 */
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_MAX_TYPE_MEMBERS = (int)13;
	/** <i>native declaration : open62541.h</i> */
	public static final int MAX_ARRAY_SIZE = (int)104857600;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_BOOLEAN = (int)1;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SBYTE = (int)2;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_BYTE = (int)3;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_INT16 = (int)4;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_UINT16 = (int)5;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_INT32 = (int)6;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_UINT32 = (int)7;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_INT64 = (int)8;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_UINT64 = (int)9;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_FLOAT = (int)10;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DOUBLE = (int)11;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_STRING = (int)12;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DATETIME = (int)13;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_GUID = (int)14;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_BYTESTRING = (int)15;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_XMLELEMENT = (int)16;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_NODEID = (int)17;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_EXPANDEDNODEID = (int)18;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_STATUSCODE = (int)19;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_QUALIFIEDNAME = (int)20;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_LOCALIZEDTEXT = (int)21;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_STRUCTURE = (int)22;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DATAVALUE = (int)23;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_BASEDATATYPE = (int)24;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DIAGNOSTICINFO = (int)25;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_NUMBER = (int)26;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_INTEGER = (int)27;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_UINTEGER = (int)28;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ENUMERATION = (int)29;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_IMAGE = (int)30;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_REFERENCES = (int)31;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_NONHIERARCHICALREFERENCES = (int)32;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HIERARCHICALREFERENCES = (int)33;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HASCHILD = (int)34;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ORGANIZES = (int)35;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HASEVENTSOURCE = (int)36;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HASMODELLINGRULE = (int)37;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HASENCODING = (int)38;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HASDESCRIPTION = (int)39;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HASTYPEDEFINITION = (int)40;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_GENERATESEVENT = (int)41;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATES = (int)44;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HASSUBTYPE = (int)45;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HASPROPERTY = (int)46;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HASCOMPONENT = (int)47;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HASNOTIFIER = (int)48;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HASORDEREDCOMPONENT = (int)49;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_FROMSTATE = (int)51;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_TOSTATE = (int)52;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HASCAUSE = (int)53;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HASEFFECT = (int)54;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HASHISTORICALCONFIGURATION = (int)56;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_BASEOBJECTTYPE = (int)58;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_FOLDERTYPE = (int)61;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_BASEVARIABLETYPE = (int)62;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_BASEDATAVARIABLETYPE = (int)63;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_PROPERTYTYPE = (int)68;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DATATYPEDESCRIPTIONTYPE = (int)69;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DATATYPEDICTIONARYTYPE = (int)72;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DATATYPESYSTEMTYPE = (int)75;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DATATYPEENCODINGTYPE = (int)76;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MODELLINGRULETYPE = (int)77;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MODELLINGRULE_MANDATORY = (int)78;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MODELLINGRULE_MANDATORYSHARED = (int)79;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MODELLINGRULE_OPTIONAL = (int)80;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MODELLINGRULE_EXPOSESITSARRAY = (int)83;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ROOTFOLDER = (int)84;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_OBJECTSFOLDER = (int)85;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_TYPESFOLDER = (int)86;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_VIEWSFOLDER = (int)87;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_OBJECTTYPESFOLDER = (int)88;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_VARIABLETYPESFOLDER = (int)89;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DATATYPESFOLDER = (int)90;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_REFERENCETYPESFOLDER = (int)91;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_XMLSCHEMA_TYPESYSTEM = (int)92;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_OPCBINARYSCHEMA_TYPESYSTEM = (int)93;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MODELLINGRULE_MANDATORY_NAMINGRULE = (int)112;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MODELLINGRULE_OPTIONAL_NAMINGRULE = (int)113;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MODELLINGRULE_EXPOSESITSARRAY_NAMINGRULE = (int)114;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MODELLINGRULE_MANDATORYSHARED_NAMINGRULE = (int)116;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HASSUBSTATEMACHINE = (int)117;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_NAMINGRULETYPE = (int)120;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_IDTYPE = (int)256;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_NODECLASS = (int)257;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_NODE = (int)258;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_OBJECTNODE = (int)261;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_OBJECTTYPENODE = (int)264;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_VARIABLENODE = (int)267;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_VARIABLETYPENODE = (int)270;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_REFERENCETYPENODE = (int)273;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_METHODNODE = (int)276;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_VIEWNODE = (int)279;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DATATYPENODE = (int)282;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_REFERENCENODE = (int)285;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_INTEGERID = (int)288;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_COUNTER = (int)289;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DURATION = (int)290;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_NUMERICRANGE = (int)291;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_TIME = (int)292;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DATE = (int)293;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_UTCTIME = (int)294;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_LOCALEID = (int)295;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ARGUMENT = (int)296;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_STATUSRESULT = (int)299;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MESSAGESECURITYMODE = (int)302;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_USERTOKENTYPE = (int)303;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_USERTOKENPOLICY = (int)304;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_APPLICATIONTYPE = (int)307;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_APPLICATIONDESCRIPTION = (int)308;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_APPLICATIONINSTANCECERTIFICATE = (int)311;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ENDPOINTDESCRIPTION = (int)312;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SECURITYTOKENREQUESTTYPE = (int)315;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_USERIDENTITYTOKEN = (int)316;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ANONYMOUSIDENTITYTOKEN = (int)319;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_USERNAMEIDENTITYTOKEN = (int)322;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_X509IDENTITYTOKEN = (int)325;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ENDPOINTCONFIGURATION = (int)331;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_COMPLIANCELEVEL = (int)334;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SUPPORTEDPROFILE = (int)335;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_BUILDINFO = (int)338;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SOFTWARECERTIFICATE = (int)341;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SIGNEDSOFTWARECERTIFICATE = (int)344;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ATTRIBUTEWRITEMASK = (int)347;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_NODEATTRIBUTESMASK = (int)348;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_NODEATTRIBUTES = (int)349;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_OBJECTATTRIBUTES = (int)352;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_VARIABLEATTRIBUTES = (int)355;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_METHODATTRIBUTES = (int)358;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_OBJECTTYPEATTRIBUTES = (int)361;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_VARIABLETYPEATTRIBUTES = (int)364;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_REFERENCETYPEATTRIBUTES = (int)367;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DATATYPEATTRIBUTES = (int)370;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_VIEWATTRIBUTES = (int)373;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ADDNODESITEM = (int)376;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ADDREFERENCESITEM = (int)379;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DELETENODESITEM = (int)382;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DELETEREFERENCESITEM = (int)385;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SESSIONAUTHENTICATIONTOKEN = (int)388;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_REQUESTHEADER = (int)389;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_RESPONSEHEADER = (int)392;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVICEFAULT = (int)395;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_FINDSERVERSREQUEST = (int)420;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_FINDSERVERSRESPONSE = (int)423;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_GETENDPOINTSREQUEST = (int)426;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_GETENDPOINTSRESPONSE = (int)429;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_REGISTEREDSERVER = (int)432;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_REGISTERSERVERREQUEST = (int)435;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_REGISTERSERVERRESPONSE = (int)438;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_CHANNELSECURITYTOKEN = (int)441;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_OPENSECURECHANNELREQUEST = (int)444;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_OPENSECURECHANNELRESPONSE = (int)447;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_CLOSESECURECHANNELREQUEST = (int)450;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_CLOSESECURECHANNELRESPONSE = (int)453;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SIGNATUREDATA = (int)456;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_CREATESESSIONREQUEST = (int)459;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_CREATESESSIONRESPONSE = (int)462;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ACTIVATESESSIONREQUEST = (int)465;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ACTIVATESESSIONRESPONSE = (int)468;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_CLOSESESSIONREQUEST = (int)471;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_CLOSESESSIONRESPONSE = (int)474;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_CANCELREQUEST = (int)477;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_CANCELRESPONSE = (int)480;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ADDNODESRESULT = (int)483;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ADDNODESREQUEST = (int)486;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ADDNODESRESPONSE = (int)489;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ADDREFERENCESREQUEST = (int)492;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ADDREFERENCESRESPONSE = (int)495;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DELETENODESREQUEST = (int)498;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DELETENODESRESPONSE = (int)501;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DELETEREFERENCESREQUEST = (int)504;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DELETEREFERENCESRESPONSE = (int)507;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_BROWSEDIRECTION = (int)510;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_VIEWDESCRIPTION = (int)511;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_BROWSEDESCRIPTION = (int)514;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_BROWSERESULTMASK = (int)517;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_REFERENCEDESCRIPTION = (int)518;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_CONTINUATIONPOINT = (int)521;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_BROWSERESULT = (int)522;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_BROWSEREQUEST = (int)525;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_BROWSERESPONSE = (int)528;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_BROWSENEXTREQUEST = (int)531;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_BROWSENEXTRESPONSE = (int)534;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_RELATIVEPATHELEMENT = (int)537;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_RELATIVEPATH = (int)540;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_BROWSEPATH = (int)543;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_BROWSEPATHTARGET = (int)546;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_BROWSEPATHRESULT = (int)549;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_TRANSLATEBROWSEPATHSTONODEIDSREQUEST = (int)552;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_TRANSLATEBROWSEPATHSTONODEIDSRESPONSE = (int)555;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_REGISTERNODESREQUEST = (int)558;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_REGISTERNODESRESPONSE = (int)561;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_UNREGISTERNODESREQUEST = (int)564;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_UNREGISTERNODESRESPONSE = (int)567;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_QUERYDATADESCRIPTION = (int)570;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_NODETYPEDESCRIPTION = (int)573;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_FILTEROPERATOR = (int)576;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_QUERYDATASET = (int)577;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_NODEREFERENCE = (int)580;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_CONTENTFILTERELEMENT = (int)583;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_CONTENTFILTER = (int)586;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_FILTEROPERAND = (int)589;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ELEMENTOPERAND = (int)592;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_LITERALOPERAND = (int)595;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ATTRIBUTEOPERAND = (int)598;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SIMPLEATTRIBUTEOPERAND = (int)601;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_CONTENTFILTERELEMENTRESULT = (int)604;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_CONTENTFILTERRESULT = (int)607;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_PARSINGRESULT = (int)610;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_QUERYFIRSTREQUEST = (int)613;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_QUERYFIRSTRESPONSE = (int)616;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_QUERYNEXTREQUEST = (int)619;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_QUERYNEXTRESPONSE = (int)622;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_TIMESTAMPSTORETURN = (int)625;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_READVALUEID = (int)626;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_READREQUEST = (int)629;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_READRESPONSE = (int)632;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HISTORYREADVALUEID = (int)635;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HISTORYREADRESULT = (int)638;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HISTORYREADDETAILS = (int)641;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_READEVENTDETAILS = (int)644;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_READRAWMODIFIEDDETAILS = (int)647;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_READPROCESSEDDETAILS = (int)650;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_READATTIMEDETAILS = (int)653;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HISTORYDATA = (int)656;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HISTORYEVENT = (int)659;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HISTORYREADREQUEST = (int)662;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HISTORYREADRESPONSE = (int)665;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_WRITEVALUE = (int)668;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_WRITEREQUEST = (int)671;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_WRITERESPONSE = (int)674;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HISTORYUPDATEDETAILS = (int)677;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_UPDATEDATADETAILS = (int)680;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_UPDATEEVENTDETAILS = (int)683;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DELETERAWMODIFIEDDETAILS = (int)686;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DELETEATTIMEDETAILS = (int)689;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DELETEEVENTDETAILS = (int)692;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HISTORYUPDATERESULT = (int)695;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HISTORYUPDATEREQUEST = (int)698;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HISTORYUPDATERESPONSE = (int)701;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_CALLMETHODREQUEST = (int)704;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_CALLMETHODRESULT = (int)707;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_CALLREQUEST = (int)710;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_CALLRESPONSE = (int)713;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MONITORINGMODE = (int)716;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DATACHANGETRIGGER = (int)717;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DEADBANDTYPE = (int)718;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MONITORINGFILTER = (int)719;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DATACHANGEFILTER = (int)722;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_EVENTFILTER = (int)725;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFILTER = (int)728;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MONITORINGFILTERRESULT = (int)731;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_EVENTFILTERRESULT = (int)734;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFILTERRESULT = (int)737;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MONITORINGPARAMETERS = (int)740;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MONITOREDITEMCREATEREQUEST = (int)743;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MONITOREDITEMCREATERESULT = (int)746;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_CREATEMONITOREDITEMSREQUEST = (int)749;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_CREATEMONITOREDITEMSRESPONSE = (int)752;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MONITOREDITEMMODIFYREQUEST = (int)755;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MONITOREDITEMMODIFYRESULT = (int)758;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MODIFYMONITOREDITEMSREQUEST = (int)761;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MODIFYMONITOREDITEMSRESPONSE = (int)764;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SETMONITORINGMODEREQUEST = (int)767;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SETMONITORINGMODERESPONSE = (int)770;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SETTRIGGERINGREQUEST = (int)773;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SETTRIGGERINGRESPONSE = (int)776;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DELETEMONITOREDITEMSREQUEST = (int)779;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DELETEMONITOREDITEMSRESPONSE = (int)782;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_CREATESUBSCRIPTIONREQUEST = (int)785;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_CREATESUBSCRIPTIONRESPONSE = (int)788;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MODIFYSUBSCRIPTIONREQUEST = (int)791;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MODIFYSUBSCRIPTIONRESPONSE = (int)794;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SETPUBLISHINGMODEREQUEST = (int)797;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SETPUBLISHINGMODERESPONSE = (int)800;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_NOTIFICATIONMESSAGE = (int)803;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MONITOREDITEMNOTIFICATION = (int)806;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DATACHANGENOTIFICATION = (int)809;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_STATUSCHANGENOTIFICATION = (int)818;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SUBSCRIPTIONACKNOWLEDGEMENT = (int)821;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_PUBLISHREQUEST = (int)824;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_PUBLISHRESPONSE = (int)827;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_REPUBLISHREQUEST = (int)830;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_REPUBLISHRESPONSE = (int)833;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_TRANSFERRESULT = (int)836;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_TRANSFERSUBSCRIPTIONSREQUEST = (int)839;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_TRANSFERSUBSCRIPTIONSRESPONSE = (int)842;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DELETESUBSCRIPTIONSREQUEST = (int)845;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DELETESUBSCRIPTIONSRESPONSE = (int)848;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_REDUNDANCYSUPPORT = (int)851;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVERSTATE = (int)852;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_REDUNDANTSERVERDATATYPE = (int)853;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSDATATYPE = (int)856;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYDATATYPE = (int)859;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVERSTATUSDATATYPE = (int)862;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SESSIONDIAGNOSTICSDATATYPE = (int)865;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSDATATYPE = (int)868;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVICECOUNTERDATATYPE = (int)871;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSDATATYPE = (int)874;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MODELCHANGESTRUCTUREDATATYPE = (int)877;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_RANGE = (int)884;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_EUINFORMATION = (int)887;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_EXCEPTIONDEVIATIONFORMAT = (int)890;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ANNOTATION = (int)891;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_PROGRAMDIAGNOSTICDATATYPE = (int)894;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SEMANTICCHANGESTRUCTUREDATATYPE = (int)897;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_EVENTNOTIFICATIONLIST = (int)914;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_EVENTFIELDLIST = (int)917;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HISTORYEVENTFIELDLIST = (int)920;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HISTORYUPDATEEVENTRESULT = (int)929;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ISSUEDIDENTITYTOKEN = (int)938;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_NOTIFICATIONDATA = (int)945;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATECONFIGURATION = (int)948;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_IMAGEBMP = (int)2000;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_IMAGEGIF = (int)2001;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_IMAGEJPG = (int)2002;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_IMAGEPNG = (int)2003;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVERTYPE = (int)2004;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVERCAPABILITIESTYPE = (int)2013;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVERDIAGNOSTICSTYPE = (int)2020;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE = (int)2026;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE = (int)2029;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_VENDORSERVERINFOTYPE = (int)2033;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVERREDUNDANCYTYPE = (int)2034;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_TRANSPARENTREDUNDANCYTYPE = (int)2036;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_NONTRANSPARENTREDUNDANCYTYPE = (int)2039;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_BASEEVENTTYPE = (int)2041;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITEVENTTYPE = (int)2052;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITSECURITYEVENTTYPE = (int)2058;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITCHANNELEVENTTYPE = (int)2059;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE = (int)2060;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITSESSIONEVENTTYPE = (int)2069;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE = (int)2071;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE = (int)2075;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITCANCELEVENTTYPE = (int)2078;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE = (int)2080;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE = (int)2082;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE = (int)2085;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE = (int)2086;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE = (int)2087;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE = (int)2088;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE = (int)2089;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE = (int)2090;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITADDNODESEVENTTYPE = (int)2091;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITDELETENODESEVENTTYPE = (int)2093;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE = (int)2095;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE = (int)2097;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITUPDATEEVENTTYPE = (int)2099;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE = (int)2100;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE = (int)2104;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE = (int)2127;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SYSTEMEVENTTYPE = (int)2130;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DEVICEFAILUREEVENTTYPE = (int)2131;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_BASEMODELCHANGEEVENTTYPE = (int)2132;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE = (int)2133;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVERVENDORCAPABILITYTYPE = (int)2137;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVERSTATUSTYPE = (int)2138;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE = (int)2150;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSARRAYTYPE = (int)2164;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSTYPE = (int)2165;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE = (int)2171;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE = (int)2172;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE = (int)2196;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE = (int)2197;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSARRAYTYPE = (int)2243;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSTYPE = (int)2244;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER = (int)2253;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERARRAY = (int)2254;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_NAMESPACEARRAY = (int)2255;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERSTATUS = (int)2256;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERSTATUS_STARTTIME = (int)2257;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERSTATUS_CURRENTTIME = (int)2258;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERSTATUS_STATE = (int)2259;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERSTATUS_BUILDINFO = (int)2260;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERSTATUS_BUILDINFO_PRODUCTNAME = (int)2261;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERSTATUS_BUILDINFO_PRODUCTURI = (int)2262;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERSTATUS_BUILDINFO_MANUFACTURERNAME = (int)2263;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERSTATUS_BUILDINFO_SOFTWAREVERSION = (int)2264;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERSTATUS_BUILDINFO_BUILDNUMBER = (int)2265;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERSTATUS_BUILDINFO_BUILDDATE = (int)2266;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVICELEVEL = (int)2267;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERCAPABILITIES = (int)2268;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERCAPABILITIES_SERVERPROFILEARRAY = (int)2269;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERCAPABILITIES_LOCALEIDARRAY = (int)2271;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERCAPABILITIES_MINSUPPORTEDSAMPLERATE = (int)2272;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERDIAGNOSTICS = (int)2274;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY = (int)2275;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_SERVERVIEWCOUNT = (int)2276;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_CURRENTSESSIONCOUNT = (int)2277;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_CUMULATEDSESSIONCOUNT = (int)2278;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_SECURITYREJECTEDSESSIONCOUNT = (int)2279;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_SESSIONTIMEOUTCOUNT = (int)2281;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_SESSIONABORTCOUNT = (int)2282;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_PUBLISHINGINTERVALCOUNT = (int)2284;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_CURRENTSUBSCRIPTIONCOUNT = (int)2285;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_CUMULATEDSUBSCRIPTIONCOUNT = (int)2286;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_SECURITYREJECTEDREQUESTSCOUNT = (int)2287;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_REJECTEDREQUESTSCOUNT = (int)2288;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SAMPLINGINTERVALDIAGNOSTICSARRAY = (int)2289;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SUBSCRIPTIONDIAGNOSTICSARRAY = (int)2290;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_ENABLEDFLAG = (int)2294;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_VENDORSERVERINFO = (int)2295;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERREDUNDANCY = (int)2296;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_STATEMACHINETYPE = (int)2299;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_STATETYPE = (int)2307;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_INITIALSTATETYPE = (int)2309;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_TRANSITIONTYPE = (int)2310;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_TRANSITIONEVENTTYPE = (int)2311;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE = (int)2315;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE = (int)2318;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE = (int)2330;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTIONTYPE = (int)2340;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_INTERPOLATIVE = (int)2341;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_AVERAGE = (int)2342;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_TIMEAVERAGE = (int)2343;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_TOTAL = (int)2344;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_MINIMUM = (int)2346;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_MAXIMUM = (int)2347;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_MINIMUMACTUALTIME = (int)2348;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_MAXIMUMACTUALTIME = (int)2349;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_RANGE = (int)2350;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_ANNOTATIONCOUNT = (int)2351;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_COUNT = (int)2352;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_NUMBEROFTRANSITIONS = (int)2355;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_START = (int)2357;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_END = (int)2358;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_DELTA = (int)2359;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_DURATIONGOOD = (int)2360;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_DURATIONBAD = (int)2361;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_PERCENTGOOD = (int)2362;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_PERCENTBAD = (int)2363;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_WORSTQUALITY = (int)2364;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DATAITEMTYPE = (int)2365;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ANALOGITEMTYPE = (int)2368;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DISCRETEITEMTYPE = (int)2372;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_TWOSTATEDISCRETETYPE = (int)2373;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MULTISTATEDISCRETETYPE = (int)2376;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE = (int)2378;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_PROGRAMDIAGNOSTICTYPE = (int)2380;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_PROGRAMSTATEMACHINETYPE = (int)2391;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERCAPABILITIES_MAXBROWSECONTINUATIONPOINTS = (int)2735;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERCAPABILITIES_MAXQUERYCONTINUATIONPOINTS = (int)2736;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERCAPABILITIES_MAXHISTORYCONTINUATIONPOINTS = (int)2737;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SEMANTICCHANGEEVENTTYPE = (int)2738;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE = (int)2748;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_STATEVARIABLETYPE = (int)2755;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_FINITESTATEVARIABLETYPE = (int)2760;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_TRANSITIONVARIABLETYPE = (int)2762;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_FINITETRANSITIONVARIABLETYPE = (int)2767;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_FINITESTATEMACHINETYPE = (int)2771;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_CONDITIONTYPE = (int)2782;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_REFRESHSTARTEVENTTYPE = (int)2787;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_REFRESHENDEVENTTYPE = (int)2788;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_REFRESHREQUIREDEVENTTYPE = (int)2789;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITCONDITIONEVENTTYPE = (int)2790;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE = (int)2803;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE = (int)2829;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DIALOGCONDITIONTYPE = (int)2830;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE = (int)2881;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ALARMCONDITIONTYPE = (int)2915;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SHELVEDSTATEMACHINETYPE = (int)2929;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_LIMITALARMTYPE = (int)2955;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERSTATUS_SECONDSTILLSHUTDOWN = (int)2992;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERSTATUS_SHUTDOWNREASON = (int)2993;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_AUDITING = (int)2994;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERCAPABILITIES_MODELLINGRULES = (int)2996;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERCAPABILITIES_AGGREGATEFUNCTIONS = (int)2997;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE = (int)2999;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE = (int)3006;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE = (int)3012;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE = (int)3014;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE = (int)3019;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE = (int)3022;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE = (int)3035;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_EVENTTYPESFOLDER = (int)3048;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_BUILDINFOTYPE = (int)3051;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DEFAULTBINARY = (int)3062;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DEFAULTXML = (int)3063;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ALWAYSGENERATESEVENT = (int)3065;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ICON = (int)3067;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_NODEVERSION = (int)3068;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_LOCALTIME = (int)3069;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ALLOWNULLS = (int)3070;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ENUMVALUES = (int)3071;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_INPUTARGUMENTS = (int)3072;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_OUTPUTARGUMENTS = (int)3073;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERCAPABILITIES_SOFTWARECERTIFICATES = (int)3704;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_REJECTEDSESSIONCOUNT = (int)3705;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SESSIONSDIAGNOSTICSSUMMARY = (int)3706;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SESSIONSDIAGNOSTICSSUMMARY_SESSIONDIAGNOSTICSARRAY = (int)3707;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SESSIONSDIAGNOSTICSSUMMARY_SESSIONSECURITYDIAGNOSTICSARRAY = (int)3708;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERREDUNDANCY_REDUNDANCYSUPPORT = (int)3709;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE = (int)3806;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ADDCOMMENTMETHODTYPE = (int)3863;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_TIMEDSHELVEMETHODTYPE = (int)6102;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ENUMVALUETYPE = (int)7594;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MESSAGESECURITYMODE_ENUMSTRINGS = (int)7595;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_COMPLIANCELEVEL_ENUMSTRINGS = (int)7599;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_BROWSEDIRECTION_ENUMSTRINGS = (int)7603;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_FILTEROPERATOR_ENUMSTRINGS = (int)7605;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_TIMESTAMPSTORETURN_ENUMSTRINGS = (int)7606;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MONITORINGMODE_ENUMSTRINGS = (int)7608;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DATACHANGETRIGGER_ENUMSTRINGS = (int)7609;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_REDUNDANCYSUPPORT_ENUMSTRINGS = (int)7611;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVERSTATE_ENUMSTRINGS = (int)7612;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_EXCEPTIONDEVIATIONFORMAT_ENUMSTRINGS = (int)7614;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_TIMEZONEDATATYPE = (int)8912;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_LOCKTYPE = (int)8921;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVERLOCK = (int)8924;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVERLOCK_LOCK = (int)8925;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVERLOCK_UNLOCK = (int)8926;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE = (int)8927;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE = (int)8944;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE = (int)8961;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_TWOSTATEVARIABLETYPE = (int)8995;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_CONDITIONVARIABLETYPE = (int)9002;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HASTRUESUBSTATE = (int)9004;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HASFALSESUBSTATE = (int)9005;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HASCONDITION = (int)9006;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_CONDITIONREFRESHMETHODTYPE = (int)9007;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DIALOGRESPONSEMETHODTYPE = (int)9031;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE = (int)9318;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_EXCLUSIVELIMITALARMTYPE = (int)9341;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_EXCLUSIVELEVELALARMTYPE = (int)9482;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE = (int)9623;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE = (int)9764;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE = (int)9906;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE = (int)10060;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE = (int)10214;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE = (int)10368;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DISCRETEALARMTYPE = (int)10523;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_OFFNORMALALARMTYPE = (int)10637;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_TRIPALARMTYPE = (int)10751;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE = (int)11093;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_BASECONDITIONCLASSTYPE = (int)11163;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_PROCESSCONDITIONCLASSTYPE = (int)11164;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MAINTENANCECONDITIONCLASSTYPE = (int)11165;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SYSTEMCONDITIONCLASSTYPE = (int)11166;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATECONFIGURATIONTYPE = (int)11187;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HISTORYSERVERCAPABILITIES = (int)11192;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HISTORYSERVERCAPABILITIES_ACCESSHISTORYDATACAPABILITY = (int)11193;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HISTORYSERVERCAPABILITIES_INSERTDATACAPABILITY = (int)11196;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HISTORYSERVERCAPABILITIES_REPLACEDATACAPABILITY = (int)11197;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HISTORYSERVERCAPABILITIES_UPDATEDATACAPABILITY = (int)11198;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HISTORYSERVERCAPABILITIES_DELETERAWCAPABILITY = (int)11199;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HISTORYSERVERCAPABILITIES_DELETEATTIMECAPABILITY = (int)11200;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HISTORYSERVERCAPABILITIES_AGGREGATEFUNCTIONS = (int)11201;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HACONFIGURATION = (int)11202;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HACONFIGURATION_AGGREGATECONFIGURATION = (int)11203;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HACONFIGURATION_AGGREGATECONFIGURATION_TREATUNCERTAINASBAD = (int)11204;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HACONFIGURATION_AGGREGATECONFIGURATION_PERCENTDATABAD = (int)11205;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HACONFIGURATION_AGGREGATECONFIGURATION_PERCENTDATAGOOD = (int)11206;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HACONFIGURATION_AGGREGATECONFIGURATION_USESLOPEDEXTRAPOLATION = (int)11207;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HACONFIGURATION_STEPPED = (int)11208;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HACONFIGURATION_DEFINITION = (int)11209;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HACONFIGURATION_MAXTIMEINTERVAL = (int)11210;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HACONFIGURATION_MINTIMEINTERVAL = (int)11211;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HACONFIGURATION_EXCEPTIONDEVIATION = (int)11212;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HACONFIGURATION_EXCEPTIONDEVIATIONFORMAT = (int)11213;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ANNOTATIONS = (int)11214;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HISTORICALEVENTFILTER = (int)11215;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MODIFICATIONINFO = (int)11216;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HISTORYMODIFIEDDATA = (int)11217;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HISTORYUPDATETYPE = (int)11234;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MULTISTATEVALUEDISCRETETYPE = (int)11238;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HISTORYSERVERCAPABILITIES_ACCESSHISTORYEVENTSCAPABILITY = (int)11242;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HISTORYSERVERCAPABILITIES_MAXRETURNDATAVALUES = (int)11273;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HISTORYSERVERCAPABILITIES_MAXRETURNEVENTVALUES = (int)11274;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HISTORYSERVERCAPABILITIES_INSERTANNOTATIONCAPABILITY = (int)11275;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HISTORYSERVERCAPABILITIES_INSERTEVENTCAPABILITY = (int)11281;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HISTORYSERVERCAPABILITIES_REPLACEEVENTCAPABILITY = (int)11282;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HISTORYSERVERCAPABILITIES_UPDATEEVENTCAPABILITY = (int)11283;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_TIMEAVERAGE2 = (int)11285;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_MINIMUM2 = (int)11286;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_MAXIMUM2 = (int)11287;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_RANGE2 = (int)11288;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_WORSTQUALITY2 = (int)11292;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_PERFORMUPDATETYPE = (int)11293;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_UPDATESTRUCTUREDATADETAILS = (int)11295;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_TOTAL2 = (int)11304;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_MINIMUMACTUALTIME2 = (int)11305;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_MAXIMUMACTUALTIME2 = (int)11306;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_DURATIONINSTATEZERO = (int)11307;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_DURATIONINSTATENONZERO = (int)11308;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERREDUNDANCY_CURRENTSERVERID = (int)11312;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERREDUNDANCY_REDUNDANTSERVERARRAY = (int)11313;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERREDUNDANCY_SERVERURIARRAY = (int)11314;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_STANDARDDEVIATIONSAMPLE = (int)11426;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_STANDARDDEVIATIONPOPULATION = (int)11427;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_VARIANCESAMPLE = (int)11428;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_VARIANCEPOPULATION = (int)11429;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ENUMSTRINGS = (int)11432;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_VALUEASTEXT = (int)11433;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_PROGRESSEVENTTYPE = (int)11436;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE = (int)11446;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_OPTIONSETTYPE = (int)11487;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_GETMONITOREDITEMS = (int)11492;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_GETMONITOREDITEMS_INPUTARGUMENTS = (int)11493;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_GETMONITOREDITEMS_OUTPUTARGUMENTS = (int)11494;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_GETMONITOREDITEMSMETHODTYPE = (int)11495;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MAXSTRINGLENGTH = (int)11498;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HISTORYSERVERCAPABILITIES_DELETEEVENTCAPABILITY = (int)11502;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HACONFIGURATION_STARTOFARCHIVE = (int)11503;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HACONFIGURATION_STARTOFONLINEARCHIVE = (int)11504;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_STARTBOUND = (int)11505;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_ENDBOUND = (int)11506;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AGGREGATEFUNCTION_DELTABOUNDS = (int)11507;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MODELLINGRULE_OPTIONALPLACEHOLDER = (int)11508;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MODELLINGRULE_OPTIONALPLACEHOLDER_NAMINGRULE = (int)11509;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MODELLINGRULE_MANDATORYPLACEHOLDER = (int)11510;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MODELLINGRULE_MANDATORYPLACEHOLDER_NAMINGRULE = (int)11511;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MAXARRAYLENGTH = (int)11512;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ENGINEERINGUNITS = (int)11513;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_OPERATIONLIMITSTYPE = (int)11564;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_FILETYPE = (int)11575;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ADDRESSSPACEFILETYPE = (int)11595;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_NAMESPACEMETADATATYPE = (int)11616;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_NAMESPACESTYPE = (int)11645;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERCAPABILITIES_MAXARRAYLENGTH = (int)11702;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERCAPABILITIES_MAXSTRINGLENGTH = (int)11703;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS = (int)11704;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERREAD = (int)11705;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERWRITE = (int)11707;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERMETHODCALL = (int)11709;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERBROWSE = (int)11710;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERREGISTERNODES = (int)11711;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERTRANSLATEBROWSEPATHSTONODEIDS = (int)11712;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERNODEMANAGEMENT = (int)11713;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXMONITOREDITEMSPERCALL = (int)11714;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_NAMESPACES = (int)11715;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_NAMESPACES_ADDRESSSPACEFILE = (int)11716;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_NAMESPACES_ADDRESSSPACEFILE_SIZE = (int)11717;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_NAMESPACES_ADDRESSSPACEFILE_WRITEABLE = (int)11718;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_NAMESPACES_ADDRESSSPACEFILE_USERWRITEABLE = (int)11719;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_NAMESPACES_ADDRESSSPACEFILE_OPENCOUNT = (int)11720;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_NAMESPACES_ADDRESSSPACEFILE_OPEN = (int)11721;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_NAMESPACES_ADDRESSSPACEFILE_OPEN_INPUTARGUMENTS = (int)11722;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_NAMESPACES_ADDRESSSPACEFILE_OPEN_OUTPUTARGUMENTS = (int)11723;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_NAMESPACES_ADDRESSSPACEFILE_CLOSE = (int)11724;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_NAMESPACES_ADDRESSSPACEFILE_CLOSE_INPUTARGUMENTS = (int)11725;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_NAMESPACES_ADDRESSSPACEFILE_READ = (int)11726;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_NAMESPACES_ADDRESSSPACEFILE_READ_INPUTARGUMENTS = (int)11727;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_NAMESPACES_ADDRESSSPACEFILE_READ_OUTPUTARGUMENTS = (int)11728;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_NAMESPACES_ADDRESSSPACEFILE_WRITE = (int)11729;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_NAMESPACES_ADDRESSSPACEFILE_WRITE_INPUTARGUMENTS = (int)11730;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_NAMESPACES_ADDRESSSPACEFILE_GETPOSITION = (int)11731;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_NAMESPACES_ADDRESSSPACEFILE_GETPOSITION_INPUTARGUMENTS = (int)11732;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_NAMESPACES_ADDRESSSPACEFILE_GETPOSITION_OUTPUTARGUMENTS = (int)11733;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_NAMESPACES_ADDRESSSPACEFILE_SETPOSITION = (int)11734;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_NAMESPACES_ADDRESSSPACEFILE_SETPOSITION_INPUTARGUMENTS = (int)11735;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_NAMESPACES_ADDRESSSPACEFILE_EXPORTNAMESPACE = (int)11736;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_BITFIELDMASKDATATYPE = (int)11737;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_OPENMETHODTYPE = (int)11738;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_CLOSEMETHODTYPE = (int)11741;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_READMETHODTYPE = (int)11743;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_WRITEMETHODTYPE = (int)11746;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_GETPOSITIONMETHODTYPE = (int)11748;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SETPOSITIONMETHODTYPE = (int)11751;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE = (int)11753;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE = (int)11856;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HACONFIGURATION_AGGREGATEFUNCTIONS = (int)11877;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_NODECLASS_ENUMVALUES = (int)11878;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_INSTANCENODE = (int)11879;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_TYPENODE = (int)11880;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_NODEATTRIBUTESMASK_ENUMVALUES = (int)11881;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ATTRIBUTEWRITEMASK_ENUMVALUES = (int)11882;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_BROWSERESULTMASK_ENUMVALUES = (int)11883;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_OPENFILEMODE = (int)11939;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_OPENFILEMODE_ENUMVALUES = (int)11940;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MODELCHANGESTRUCTUREVERBMASK = (int)11941;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_MODELCHANGESTRUCTUREVERBMASK_ENUMVALUES = (int)11942;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ENDPOINTURLLISTDATATYPE = (int)11943;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_NETWORKGROUPDATATYPE = (int)11944;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_NONTRANSPARENTNETWORKREDUNDANCYTYPE = (int)11945;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_ARRAYITEMTYPE = (int)12021;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_YARRAYITEMTYPE = (int)12029;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_XYARRAYITEMTYPE = (int)12038;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_IMAGEITEMTYPE = (int)12047;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_CUBEITEMTYPE = (int)12057;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_NDIMENSIONARRAYITEMTYPE = (int)12068;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AXISSCALEENUMERATION = (int)12077;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AXISSCALEENUMERATION_ENUMSTRINGS = (int)12078;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_AXISINFORMATION = (int)12079;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_XVTYPE = (int)12080;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERHISTORYREADDATA = (int)12165;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERHISTORYREADEVENTS = (int)12166;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERHISTORYUPDATEDATA = (int)12167;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERHISTORYUPDATEEVENTS = (int)12168;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_VIEWVERSION = (int)12170;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_COMPLEXNUMBERTYPE = (int)12171;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_DOUBLECOMPLEXNUMBERTYPE = (int)12172;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_NS0ID_HASMODELPARENT = (int)50;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_COUNT = (int)123;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_BOOLEAN = (int)0;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_SBYTE = (int)1;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_BYTE = (int)2;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_INT16 = (int)3;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_UINT16 = (int)4;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_INT32 = (int)5;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_UINT32 = (int)6;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_INT64 = (int)7;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_UINT64 = (int)8;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_FLOAT = (int)9;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_DOUBLE = (int)10;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_STRING = (int)11;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_DATETIME = (int)12;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_GUID = (int)13;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_BYTESTRING = (int)14;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_XMLELEMENT = (int)15;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_NODEID = (int)16;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_EXPANDEDNODEID = (int)17;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_STATUSCODE = (int)18;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_QUALIFIEDNAME = (int)19;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_LOCALIZEDTEXT = (int)20;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_EXTENSIONOBJECT = (int)21;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_DATAVALUE = (int)22;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_VARIANT = (int)23;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_DIAGNOSTICINFO = (int)24;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_IDTYPE = (int)25;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_NODECLASS = (int)26;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_REFERENCENODE = (int)27;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_APPLICATIONTYPE = (int)28;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_APPLICATIONDESCRIPTION = (int)29;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_REQUESTHEADER = (int)30;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_RESPONSEHEADER = (int)31;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_SERVICEFAULT = (int)32;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_FINDSERVERSREQUEST = (int)33;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_FINDSERVERSRESPONSE = (int)34;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_MESSAGESECURITYMODE = (int)35;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_USERTOKENTYPE = (int)36;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_USERTOKENPOLICY = (int)37;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_ENDPOINTDESCRIPTION = (int)38;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_GETENDPOINTSREQUEST = (int)39;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_GETENDPOINTSRESPONSE = (int)40;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_SECURITYTOKENREQUESTTYPE = (int)41;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_CHANNELSECURITYTOKEN = (int)42;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_OPENSECURECHANNELREQUEST = (int)43;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_OPENSECURECHANNELRESPONSE = (int)44;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_CLOSESECURECHANNELREQUEST = (int)45;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_CLOSESECURECHANNELRESPONSE = (int)46;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_SIGNEDSOFTWARECERTIFICATE = (int)47;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_SIGNATUREDATA = (int)48;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_CREATESESSIONREQUEST = (int)49;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_CREATESESSIONRESPONSE = (int)50;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_USERIDENTITYTOKEN = (int)51;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_ANONYMOUSIDENTITYTOKEN = (int)52;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_USERNAMEIDENTITYTOKEN = (int)53;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_ACTIVATESESSIONREQUEST = (int)54;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_ACTIVATESESSIONRESPONSE = (int)55;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_CLOSESESSIONREQUEST = (int)56;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_CLOSESESSIONRESPONSE = (int)57;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_NODEATTRIBUTESMASK = (int)58;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_NODEATTRIBUTES = (int)59;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_OBJECTATTRIBUTES = (int)60;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_VARIABLEATTRIBUTES = (int)61;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_OBJECTTYPEATTRIBUTES = (int)62;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_REFERENCETYPEATTRIBUTES = (int)63;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_VIEWATTRIBUTES = (int)64;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_ADDNODESITEM = (int)65;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_ADDNODESRESULT = (int)66;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_ADDNODESREQUEST = (int)67;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_ADDNODESRESPONSE = (int)68;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_ADDREFERENCESITEM = (int)69;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_ADDREFERENCESREQUEST = (int)70;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_ADDREFERENCESRESPONSE = (int)71;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_DELETENODESITEM = (int)72;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_DELETENODESREQUEST = (int)73;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_DELETENODESRESPONSE = (int)74;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_DELETEREFERENCESITEM = (int)75;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_DELETEREFERENCESREQUEST = (int)76;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_DELETEREFERENCESRESPONSE = (int)77;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_BROWSEDIRECTION = (int)78;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_VIEWDESCRIPTION = (int)79;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_BROWSEDESCRIPTION = (int)80;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_BROWSERESULTMASK = (int)81;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_REFERENCEDESCRIPTION = (int)82;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_BROWSERESULT = (int)83;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_BROWSEREQUEST = (int)84;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_BROWSERESPONSE = (int)85;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_BROWSENEXTREQUEST = (int)86;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_BROWSENEXTRESPONSE = (int)87;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_RELATIVEPATHELEMENT = (int)88;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_RELATIVEPATH = (int)89;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_BROWSEPATH = (int)90;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_BROWSEPATHTARGET = (int)91;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_BROWSEPATHRESULT = (int)92;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_TRANSLATEBROWSEPATHSTONODEIDSREQUEST = (int)93;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_TRANSLATEBROWSEPATHSTONODEIDSRESPONSE = (int)94;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_REGISTERNODESREQUEST = (int)95;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_REGISTERNODESRESPONSE = (int)96;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_UNREGISTERNODESREQUEST = (int)97;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_UNREGISTERNODESRESPONSE = (int)98;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_TIMESTAMPSTORETURN = (int)99;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_READVALUEID = (int)100;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_READREQUEST = (int)101;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_READRESPONSE = (int)102;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_WRITEVALUE = (int)103;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_WRITEREQUEST = (int)104;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_WRITERESPONSE = (int)105;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_MONITORINGMODE = (int)106;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_MONITORINGPARAMETERS = (int)107;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_MONITOREDITEMCREATEREQUEST = (int)108;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_MONITOREDITEMCREATERESULT = (int)109;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_CREATEMONITOREDITEMSREQUEST = (int)110;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_CREATEMONITOREDITEMSRESPONSE = (int)111;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_CREATESUBSCRIPTIONREQUEST = (int)112;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_CREATESUBSCRIPTIONRESPONSE = (int)113;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_SETPUBLISHINGMODEREQUEST = (int)114;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_SETPUBLISHINGMODERESPONSE = (int)115;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_NOTIFICATIONMESSAGE = (int)116;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_SUBSCRIPTIONACKNOWLEDGEMENT = (int)117;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_PUBLISHREQUEST = (int)118;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_PUBLISHRESPONSE = (int)119;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_BUILDINFO = (int)120;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_SERVERSTATE = (int)121;
	/** <i>native declaration : open62541.h</i> */
	public static final int UA_TYPES_SERVERSTATUSDATATYPE = (int)122;
	/** <i>native declaration : open62541.h:1967</i> */
	public static abstract class UA_Logger extends Callback<UA_Logger > {
		public void apply(IntValuedEnum<Open62541ExtLibrary.UA_LogLevel > level, IntValuedEnum<Open62541ExtLibrary.UA_LogCategory > category, Pointer<Byte > msg, Object... varArgs1) {
			apply((int)level.value(), (int)category.value(), Pointer.getPeer(msg), varArgs1);
		}
		public void apply(int level, int category, @Ptr long msg, Object... varArgs1) {
			apply(FlagSet.fromValue(level, Open62541ExtLibrary.UA_LogLevel.class), FlagSet.fromValue(category, Open62541ExtLibrary.UA_LogCategory.class), (Pointer)Pointer.pointerToAddress(msg, Byte.class), varArgs1);
		}
	};
	/** <i>native declaration : open62541.h:2150</i> */
	public static abstract class UA_ConnectClientConnection extends Callback<UA_ConnectClientConnection > {
		public UA_Connection apply(Pointer<Byte > endpointUrl, Pointer<Pointer<Open62541ExtLibrary.UA_Logger > > logger) {
			return apply(Pointer.getPeer(endpointUrl), Pointer.getPeer(logger));
		}
		public UA_Connection apply(@Ptr long endpointUrl, @Ptr long logger) {
			return apply((Pointer)Pointer.pointerToAddress(endpointUrl, Byte.class), (Pointer)Pointer.pointerToAddress(logger, DefaultParameterizedType.paramType(Pointer.class, Open62541ExtLibrary.UA_Logger.class)));
		}
	};
	/**
	 * Functions for all types<br>
	 * Original signature : <code>__attribute__((dllimport)) UA_Boolean* UA_Boolean_new()</code><br>
	 * <i>native declaration : open62541.h:617</i>
	 */
	public static Pointer<Boolean > UA_Boolean_new() {
		return (Pointer)Pointer.pointerToAddress(UA_Boolean_new$2(), Boolean.class);
	}
	@Ptr 
	@Name("UA_Boolean_new") 
	protected native static long UA_Boolean_new$2();
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_Boolean_init(UA_Boolean*)</code><br>
	 * <i>native declaration : open62541.h:619</i>
	 */
	public static void UA_Boolean_init(Pointer<Boolean > p) {
		UA_Boolean_init(Pointer.getPeer(p));
	}
	protected native static void UA_Boolean_init(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_Boolean_delete(UA_Boolean*)</code><br>
	 * <i>native declaration : open62541.h:621</i>
	 */
	public static void UA_Boolean_delete(Pointer<Boolean > p) {
		UA_Boolean_delete(Pointer.getPeer(p));
	}
	protected native static void UA_Boolean_delete(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_Boolean_deleteMembers(UA_Boolean*)</code><br>
	 * <i>native declaration : open62541.h:623</i>
	 */
	public static void UA_Boolean_deleteMembers(Pointer<Boolean > p) {
		UA_Boolean_deleteMembers(Pointer.getPeer(p));
	}
	protected native static void UA_Boolean_deleteMembers(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_Boolean_copy(const UA_Boolean*, UA_Boolean*)</code><br>
	 * <i>native declaration : open62541.h:625</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_Boolean_copy(Pointer<Boolean > src, Pointer<Boolean > dst) {
		return FlagSet.fromValue(UA_Boolean_copy(Pointer.getPeer(src), Pointer.getPeer(dst)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_Boolean_copy(@Ptr long src, @Ptr long dst);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_SByte* UA_SByte_new()</code><br>
	 * <i>native declaration : open62541.h:627</i>
	 */
	public static Pointer<Byte > UA_SByte_new() {
		return (Pointer)Pointer.pointerToAddress(UA_SByte_new$2(), Byte.class);
	}
	@Ptr 
	@Name("UA_SByte_new") 
	protected native static long UA_SByte_new$2();
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_SByte_init(UA_SByte*)</code><br>
	 * <i>native declaration : open62541.h:629</i>
	 */
	public static void UA_SByte_init(Pointer<Byte > p) {
		UA_SByte_init(Pointer.getPeer(p));
	}
	protected native static void UA_SByte_init(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_SByte_delete(UA_SByte*)</code><br>
	 * <i>native declaration : open62541.h:631</i>
	 */
	public static void UA_SByte_delete(Pointer<Byte > p) {
		UA_SByte_delete(Pointer.getPeer(p));
	}
	protected native static void UA_SByte_delete(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_SByte_deleteMembers(UA_SByte*)</code><br>
	 * <i>native declaration : open62541.h:633</i>
	 */
	public static void UA_SByte_deleteMembers(Pointer<Byte > p) {
		UA_SByte_deleteMembers(Pointer.getPeer(p));
	}
	protected native static void UA_SByte_deleteMembers(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_SByte_copy(const UA_SByte*, UA_SByte*)</code><br>
	 * <i>native declaration : open62541.h:635</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_SByte_copy(Pointer<Byte > src, Pointer<Byte > dst) {
		return FlagSet.fromValue(UA_SByte_copy(Pointer.getPeer(src), Pointer.getPeer(dst)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_SByte_copy(@Ptr long src, @Ptr long dst);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_Byte* UA_Byte_new()</code><br>
	 * <i>native declaration : open62541.h:637</i>
	 */
	public static Pointer<Byte > UA_Byte_new() {
		return (Pointer)Pointer.pointerToAddress(UA_Byte_new$2(), Byte.class);
	}
	@Ptr 
	@Name("UA_Byte_new") 
	protected native static long UA_Byte_new$2();
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_Byte_init(UA_Byte*)</code><br>
	 * <i>native declaration : open62541.h:639</i>
	 */
	public static void UA_Byte_init(Pointer<Byte > p) {
		UA_Byte_init(Pointer.getPeer(p));
	}
	protected native static void UA_Byte_init(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_Byte_delete(UA_Byte*)</code><br>
	 * <i>native declaration : open62541.h:641</i>
	 */
	public static void UA_Byte_delete(Pointer<Byte > p) {
		UA_Byte_delete(Pointer.getPeer(p));
	}
	protected native static void UA_Byte_delete(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_Byte_deleteMembers(UA_Byte*)</code><br>
	 * <i>native declaration : open62541.h:643</i>
	 */
	public static void UA_Byte_deleteMembers(Pointer<Byte > p) {
		UA_Byte_deleteMembers(Pointer.getPeer(p));
	}
	protected native static void UA_Byte_deleteMembers(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_Byte_copy(const UA_Byte*, UA_Byte*)</code><br>
	 * <i>native declaration : open62541.h:645</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_Byte_copy(Pointer<Byte > src, Pointer<Byte > dst) {
		return FlagSet.fromValue(UA_Byte_copy(Pointer.getPeer(src), Pointer.getPeer(dst)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_Byte_copy(@Ptr long src, @Ptr long dst);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_Int16* UA_Int16_new()</code><br>
	 * <i>native declaration : open62541.h:647</i>
	 */
	public static Pointer<Short > UA_Int16_new() {
		return (Pointer)Pointer.pointerToAddress(UA_Int16_new$2(), Short.class);
	}
	@Ptr 
	@Name("UA_Int16_new") 
	protected native static long UA_Int16_new$2();
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_Int16_init(UA_Int16*)</code><br>
	 * <i>native declaration : open62541.h:649</i>
	 */
	public static void UA_Int16_init(Pointer<Short > p) {
		UA_Int16_init(Pointer.getPeer(p));
	}
	protected native static void UA_Int16_init(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_Int16_delete(UA_Int16*)</code><br>
	 * <i>native declaration : open62541.h:651</i>
	 */
	public static void UA_Int16_delete(Pointer<Short > p) {
		UA_Int16_delete(Pointer.getPeer(p));
	}
	protected native static void UA_Int16_delete(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_Int16_deleteMembers(UA_Int16*)</code><br>
	 * <i>native declaration : open62541.h:653</i>
	 */
	public static void UA_Int16_deleteMembers(Pointer<Short > p) {
		UA_Int16_deleteMembers(Pointer.getPeer(p));
	}
	protected native static void UA_Int16_deleteMembers(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_Int16_copy(const UA_Int16*, UA_Int16*)</code><br>
	 * <i>native declaration : open62541.h:655</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_Int16_copy(Pointer<Short > src, Pointer<Short > dst) {
		return FlagSet.fromValue(UA_Int16_copy(Pointer.getPeer(src), Pointer.getPeer(dst)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_Int16_copy(@Ptr long src, @Ptr long dst);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_UInt16* UA_UInt16_new()</code><br>
	 * <i>native declaration : open62541.h:657</i>
	 */
	public static Pointer<Short > UA_UInt16_new() {
		return (Pointer)Pointer.pointerToAddress(UA_UInt16_new$2(), Short.class);
	}
	@Ptr 
	@Name("UA_UInt16_new") 
	protected native static long UA_UInt16_new$2();
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_UInt16_init(UA_UInt16*)</code><br>
	 * <i>native declaration : open62541.h:659</i>
	 */
	public static void UA_UInt16_init(Pointer<Short > p) {
		UA_UInt16_init(Pointer.getPeer(p));
	}
	protected native static void UA_UInt16_init(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_UInt16_delete(UA_UInt16*)</code><br>
	 * <i>native declaration : open62541.h:661</i>
	 */
	public static void UA_UInt16_delete(Pointer<Short > p) {
		UA_UInt16_delete(Pointer.getPeer(p));
	}
	protected native static void UA_UInt16_delete(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_UInt16_deleteMembers(UA_UInt16*)</code><br>
	 * <i>native declaration : open62541.h:663</i>
	 */
	public static void UA_UInt16_deleteMembers(Pointer<Short > p) {
		UA_UInt16_deleteMembers(Pointer.getPeer(p));
	}
	protected native static void UA_UInt16_deleteMembers(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_UInt16_copy(const UA_UInt16*, UA_UInt16*)</code><br>
	 * <i>native declaration : open62541.h:665</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_UInt16_copy(Pointer<Short > src, Pointer<Short > dst) {
		return FlagSet.fromValue(UA_UInt16_copy(Pointer.getPeer(src), Pointer.getPeer(dst)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_UInt16_copy(@Ptr long src, @Ptr long dst);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_Int32* UA_Int32_new()</code><br>
	 * <i>native declaration : open62541.h:667</i>
	 */
	public static Pointer<Integer > UA_Int32_new() {
		return (Pointer)Pointer.pointerToAddress(UA_Int32_new$2(), Integer.class);
	}
	@Ptr 
	@Name("UA_Int32_new") 
	protected native static long UA_Int32_new$2();
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_Int32_init(UA_Int32*)</code><br>
	 * <i>native declaration : open62541.h:669</i>
	 */
	public static void UA_Int32_init(Pointer<Integer > p) {
		UA_Int32_init(Pointer.getPeer(p));
	}
	protected native static void UA_Int32_init(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_Int32_delete(UA_Int32*)</code><br>
	 * <i>native declaration : open62541.h:671</i>
	 */
	public static void UA_Int32_delete(Pointer<Integer > p) {
		UA_Int32_delete(Pointer.getPeer(p));
	}
	protected native static void UA_Int32_delete(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_Int32_deleteMembers(UA_Int32*)</code><br>
	 * <i>native declaration : open62541.h:673</i>
	 */
	public static void UA_Int32_deleteMembers(Pointer<Integer > p) {
		UA_Int32_deleteMembers(Pointer.getPeer(p));
	}
	protected native static void UA_Int32_deleteMembers(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_Int32_copy(const UA_Int32*, UA_Int32*)</code><br>
	 * <i>native declaration : open62541.h:675</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_Int32_copy(Pointer<Integer > src, Pointer<Integer > dst) {
		return FlagSet.fromValue(UA_Int32_copy(Pointer.getPeer(src), Pointer.getPeer(dst)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_Int32_copy(@Ptr long src, @Ptr long dst);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_UInt32* UA_UInt32_new()</code><br>
	 * <i>native declaration : open62541.h:677</i>
	 */
	public static Pointer<Integer > UA_UInt32_new() {
		return (Pointer)Pointer.pointerToAddress(UA_UInt32_new$2(), Integer.class);
	}
	@Ptr 
	@Name("UA_UInt32_new") 
	protected native static long UA_UInt32_new$2();
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_UInt32_init(UA_UInt32*)</code><br>
	 * <i>native declaration : open62541.h:679</i>
	 */
	public static void UA_UInt32_init(Pointer<Integer > p) {
		UA_UInt32_init(Pointer.getPeer(p));
	}
	protected native static void UA_UInt32_init(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_UInt32_delete(UA_UInt32*)</code><br>
	 * <i>native declaration : open62541.h:681</i>
	 */
	public static void UA_UInt32_delete(Pointer<Integer > p) {
		UA_UInt32_delete(Pointer.getPeer(p));
	}
	protected native static void UA_UInt32_delete(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_UInt32_deleteMembers(UA_UInt32*)</code><br>
	 * <i>native declaration : open62541.h:683</i>
	 */
	public static void UA_UInt32_deleteMembers(Pointer<Integer > p) {
		UA_UInt32_deleteMembers(Pointer.getPeer(p));
	}
	protected native static void UA_UInt32_deleteMembers(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_UInt32_copy(const UA_UInt32*, UA_UInt32*)</code><br>
	 * <i>native declaration : open62541.h:685</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_UInt32_copy(Pointer<Integer > src, Pointer<Integer > dst) {
		return FlagSet.fromValue(UA_UInt32_copy(Pointer.getPeer(src), Pointer.getPeer(dst)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_UInt32_copy(@Ptr long src, @Ptr long dst);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_Int64* UA_Int64_new()</code><br>
	 * <i>native declaration : open62541.h:687</i>
	 */
	public static Pointer<Long > UA_Int64_new() {
		return (Pointer)Pointer.pointerToAddress(UA_Int64_new$2(), Long.class);
	}
	@Ptr 
	@Name("UA_Int64_new") 
	protected native static long UA_Int64_new$2();
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_Int64_init(UA_Int64*)</code><br>
	 * <i>native declaration : open62541.h:689</i>
	 */
	public static void UA_Int64_init(Pointer<Long > p) {
		UA_Int64_init(Pointer.getPeer(p));
	}
	protected native static void UA_Int64_init(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_Int64_delete(UA_Int64*)</code><br>
	 * <i>native declaration : open62541.h:691</i>
	 */
	public static void UA_Int64_delete(Pointer<Long > p) {
		UA_Int64_delete(Pointer.getPeer(p));
	}
	protected native static void UA_Int64_delete(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_Int64_deleteMembers(UA_Int64*)</code><br>
	 * <i>native declaration : open62541.h:693</i>
	 */
	public static void UA_Int64_deleteMembers(Pointer<Long > p) {
		UA_Int64_deleteMembers(Pointer.getPeer(p));
	}
	protected native static void UA_Int64_deleteMembers(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_Int64_copy(const UA_Int64*, UA_Int64*)</code><br>
	 * <i>native declaration : open62541.h:695</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_Int64_copy(Pointer<Long > src, Pointer<Long > dst) {
		return FlagSet.fromValue(UA_Int64_copy(Pointer.getPeer(src), Pointer.getPeer(dst)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_Int64_copy(@Ptr long src, @Ptr long dst);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_UInt64* UA_UInt64_new()</code><br>
	 * <i>native declaration : open62541.h:697</i>
	 */
	public static Pointer<Long > UA_UInt64_new() {
		return (Pointer)Pointer.pointerToAddress(UA_UInt64_new$2(), Long.class);
	}
	@Ptr 
	@Name("UA_UInt64_new") 
	protected native static long UA_UInt64_new$2();
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_UInt64_init(UA_UInt64*)</code><br>
	 * <i>native declaration : open62541.h:699</i>
	 */
	public static void UA_UInt64_init(Pointer<Long > p) {
		UA_UInt64_init(Pointer.getPeer(p));
	}
	protected native static void UA_UInt64_init(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_UInt64_delete(UA_UInt64*)</code><br>
	 * <i>native declaration : open62541.h:701</i>
	 */
	public static void UA_UInt64_delete(Pointer<Long > p) {
		UA_UInt64_delete(Pointer.getPeer(p));
	}
	protected native static void UA_UInt64_delete(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_UInt64_deleteMembers(UA_UInt64*)</code><br>
	 * <i>native declaration : open62541.h:703</i>
	 */
	public static void UA_UInt64_deleteMembers(Pointer<Long > p) {
		UA_UInt64_deleteMembers(Pointer.getPeer(p));
	}
	protected native static void UA_UInt64_deleteMembers(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_UInt64_copy(const UA_UInt64*, UA_UInt64*)</code><br>
	 * <i>native declaration : open62541.h:705</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_UInt64_copy(Pointer<Long > src, Pointer<Long > dst) {
		return FlagSet.fromValue(UA_UInt64_copy(Pointer.getPeer(src), Pointer.getPeer(dst)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_UInt64_copy(@Ptr long src, @Ptr long dst);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_Float* UA_Float_new()</code><br>
	 * <i>native declaration : open62541.h:707</i>
	 */
	public static Pointer<Float > UA_Float_new() {
		return (Pointer)Pointer.pointerToAddress(UA_Float_new$2(), Float.class);
	}
	@Ptr 
	@Name("UA_Float_new") 
	protected native static long UA_Float_new$2();
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_Float_init(UA_Float*)</code><br>
	 * <i>native declaration : open62541.h:709</i>
	 */
	public static void UA_Float_init(Pointer<Float > p) {
		UA_Float_init(Pointer.getPeer(p));
	}
	protected native static void UA_Float_init(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_Float_delete(UA_Float*)</code><br>
	 * <i>native declaration : open62541.h:711</i>
	 */
	public static void UA_Float_delete(Pointer<Float > p) {
		UA_Float_delete(Pointer.getPeer(p));
	}
	protected native static void UA_Float_delete(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_Float_deleteMembers(UA_Float*)</code><br>
	 * <i>native declaration : open62541.h:713</i>
	 */
	public static void UA_Float_deleteMembers(Pointer<Float > p) {
		UA_Float_deleteMembers(Pointer.getPeer(p));
	}
	protected native static void UA_Float_deleteMembers(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_Float_copy(const UA_Float*, UA_Float*)</code><br>
	 * <i>native declaration : open62541.h:715</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_Float_copy(Pointer<Float > src, Pointer<Float > dst) {
		return FlagSet.fromValue(UA_Float_copy(Pointer.getPeer(src), Pointer.getPeer(dst)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_Float_copy(@Ptr long src, @Ptr long dst);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_Double* UA_Double_new()</code><br>
	 * <i>native declaration : open62541.h:717</i>
	 */
	public static Pointer<Double > UA_Double_new() {
		return (Pointer)Pointer.pointerToAddress(UA_Double_new$2(), Double.class);
	}
	@Ptr 
	@Name("UA_Double_new") 
	protected native static long UA_Double_new$2();
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_Double_init(UA_Double*)</code><br>
	 * <i>native declaration : open62541.h:719</i>
	 */
	public static void UA_Double_init(Pointer<Double > p) {
		UA_Double_init(Pointer.getPeer(p));
	}
	protected native static void UA_Double_init(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_Double_delete(UA_Double*)</code><br>
	 * <i>native declaration : open62541.h:721</i>
	 */
	public static void UA_Double_delete(Pointer<Double > p) {
		UA_Double_delete(Pointer.getPeer(p));
	}
	protected native static void UA_Double_delete(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_Double_deleteMembers(UA_Double*)</code><br>
	 * <i>native declaration : open62541.h:723</i>
	 */
	public static void UA_Double_deleteMembers(Pointer<Double > p) {
		UA_Double_deleteMembers(Pointer.getPeer(p));
	}
	protected native static void UA_Double_deleteMembers(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_Double_copy(const UA_Double*, UA_Double*)</code><br>
	 * <i>native declaration : open62541.h:725</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_Double_copy(Pointer<Double > src, Pointer<Double > dst) {
		return FlagSet.fromValue(UA_Double_copy(Pointer.getPeer(src), Pointer.getPeer(dst)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_Double_copy(@Ptr long src, @Ptr long dst);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_String* UA_String_new()</code><br>
	 * <i>native declaration : open62541.h:727</i>
	 */
	public static Pointer<UA_String > UA_String_new() {
		return (Pointer)Pointer.pointerToAddress(UA_String_new$2(), UA_String.class);
	}
	@Ptr 
	@Name("UA_String_new") 
	protected native static long UA_String_new$2();
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_String_init(UA_String*)</code><br>
	 * <i>native declaration : open62541.h:729</i>
	 */
	public static void UA_String_init(Pointer<UA_String > p) {
		UA_String_init(Pointer.getPeer(p));
	}
	protected native static void UA_String_init(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_String_delete(UA_String*)</code><br>
	 * <i>native declaration : open62541.h:731</i>
	 */
	public static void UA_String_delete(Pointer<UA_String > p) {
		UA_String_delete(Pointer.getPeer(p));
	}
	protected native static void UA_String_delete(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_String_deleteMembers(UA_String*)</code><br>
	 * <i>native declaration : open62541.h:733</i>
	 */
	public static void UA_String_deleteMembers(Pointer<UA_String > p) {
		UA_String_deleteMembers(Pointer.getPeer(p));
	}
	protected native static void UA_String_deleteMembers(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_String_copy(const UA_String*, UA_String*)</code><br>
	 * <i>native declaration : open62541.h:735</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_String_copy(Pointer<UA_String > src, Pointer<UA_String > dst) {
		return FlagSet.fromValue(UA_String_copy(Pointer.getPeer(src), Pointer.getPeer(dst)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_String_copy(@Ptr long src, @Ptr long dst);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_Guid* UA_Guid_new()</code><br>
	 * <i>native declaration : open62541.h:737</i>
	 */
	public static Pointer<UA_Guid > UA_Guid_new() {
		return (Pointer)Pointer.pointerToAddress(UA_Guid_new$2(), UA_Guid.class);
	}
	@Ptr 
	@Name("UA_Guid_new") 
	protected native static long UA_Guid_new$2();
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_Guid_init(UA_Guid*)</code><br>
	 * <i>native declaration : open62541.h:739</i>
	 */
	public static void UA_Guid_init(Pointer<UA_Guid > p) {
		UA_Guid_init(Pointer.getPeer(p));
	}
	protected native static void UA_Guid_init(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_Guid_delete(UA_Guid*)</code><br>
	 * <i>native declaration : open62541.h:741</i>
	 */
	public static void UA_Guid_delete(Pointer<UA_Guid > p) {
		UA_Guid_delete(Pointer.getPeer(p));
	}
	protected native static void UA_Guid_delete(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_Guid_deleteMembers(UA_Guid*)</code><br>
	 * <i>native declaration : open62541.h:743</i>
	 */
	public static void UA_Guid_deleteMembers(Pointer<UA_Guid > p) {
		UA_Guid_deleteMembers(Pointer.getPeer(p));
	}
	protected native static void UA_Guid_deleteMembers(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_Guid_copy(const UA_Guid*, UA_Guid*)</code><br>
	 * <i>native declaration : open62541.h:745</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_Guid_copy(Pointer<UA_Guid > src, Pointer<UA_Guid > dst) {
		return FlagSet.fromValue(UA_Guid_copy(Pointer.getPeer(src), Pointer.getPeer(dst)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_Guid_copy(@Ptr long src, @Ptr long dst);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_NodeId* UA_NodeId_new()</code><br>
	 * <i>native declaration : open62541.h:747</i>
	 */
	public static Pointer<UA_NodeId > UA_NodeId_new() {
		return (Pointer)Pointer.pointerToAddress(UA_NodeId_new$2(), UA_NodeId.class);
	}
	@Ptr 
	@Name("UA_NodeId_new") 
	protected native static long UA_NodeId_new$2();
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_NodeId_init(UA_NodeId*)</code><br>
	 * <i>native declaration : open62541.h:749</i>
	 */
	public static void UA_NodeId_init(Pointer<UA_NodeId > p) {
		UA_NodeId_init(Pointer.getPeer(p));
	}
	protected native static void UA_NodeId_init(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_NodeId_delete(UA_NodeId*)</code><br>
	 * <i>native declaration : open62541.h:751</i>
	 */
	public static void UA_NodeId_delete(Pointer<UA_NodeId > p) {
		UA_NodeId_delete(Pointer.getPeer(p));
	}
	protected native static void UA_NodeId_delete(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_NodeId_deleteMembers(UA_NodeId*)</code><br>
	 * <i>native declaration : open62541.h:753</i>
	 */
	public static void UA_NodeId_deleteMembers(Pointer<UA_NodeId > p) {
		UA_NodeId_deleteMembers(Pointer.getPeer(p));
	}
	protected native static void UA_NodeId_deleteMembers(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_NodeId_copy(const UA_NodeId*, UA_NodeId*)</code><br>
	 * <i>native declaration : open62541.h:755</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_NodeId_copy(Pointer<UA_NodeId > src, Pointer<UA_NodeId > dst) {
		return FlagSet.fromValue(UA_NodeId_copy(Pointer.getPeer(src), Pointer.getPeer(dst)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_NodeId_copy(@Ptr long src, @Ptr long dst);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_ExpandedNodeId* UA_ExpandedNodeId_new()</code><br>
	 * <i>native declaration : open62541.h:757</i>
	 */
	public static Pointer<UA_ExpandedNodeId > UA_ExpandedNodeId_new() {
		return (Pointer)Pointer.pointerToAddress(UA_ExpandedNodeId_new$2(), UA_ExpandedNodeId.class);
	}
	@Ptr 
	@Name("UA_ExpandedNodeId_new") 
	protected native static long UA_ExpandedNodeId_new$2();
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_ExpandedNodeId_init(UA_ExpandedNodeId*)</code><br>
	 * <i>native declaration : open62541.h:759</i>
	 */
	public static void UA_ExpandedNodeId_init(Pointer<UA_ExpandedNodeId > p) {
		UA_ExpandedNodeId_init(Pointer.getPeer(p));
	}
	protected native static void UA_ExpandedNodeId_init(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_ExpandedNodeId_delete(UA_ExpandedNodeId*)</code><br>
	 * <i>native declaration : open62541.h:761</i>
	 */
	public static void UA_ExpandedNodeId_delete(Pointer<UA_ExpandedNodeId > p) {
		UA_ExpandedNodeId_delete(Pointer.getPeer(p));
	}
	protected native static void UA_ExpandedNodeId_delete(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_ExpandedNodeId_deleteMembers(UA_ExpandedNodeId*)</code><br>
	 * <i>native declaration : open62541.h:763</i>
	 */
	public static void UA_ExpandedNodeId_deleteMembers(Pointer<UA_ExpandedNodeId > p) {
		UA_ExpandedNodeId_deleteMembers(Pointer.getPeer(p));
	}
	protected native static void UA_ExpandedNodeId_deleteMembers(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_ExpandedNodeId_copy(const UA_ExpandedNodeId*, UA_ExpandedNodeId*)</code><br>
	 * <i>native declaration : open62541.h:765</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_ExpandedNodeId_copy(Pointer<UA_ExpandedNodeId > src, Pointer<UA_ExpandedNodeId > dst) {
		return FlagSet.fromValue(UA_ExpandedNodeId_copy(Pointer.getPeer(src), Pointer.getPeer(dst)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_ExpandedNodeId_copy(@Ptr long src, @Ptr long dst);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_QualifiedName* UA_QualifiedName_new()</code><br>
	 * <i>native declaration : open62541.h:767</i>
	 */
	public static Pointer<UA_QualifiedName > UA_QualifiedName_new() {
		return (Pointer)Pointer.pointerToAddress(UA_QualifiedName_new$2(), UA_QualifiedName.class);
	}
	@Ptr 
	@Name("UA_QualifiedName_new") 
	protected native static long UA_QualifiedName_new$2();
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_QualifiedName_init(UA_QualifiedName*)</code><br>
	 * <i>native declaration : open62541.h:769</i>
	 */
	public static void UA_QualifiedName_init(Pointer<UA_QualifiedName > p) {
		UA_QualifiedName_init(Pointer.getPeer(p));
	}
	protected native static void UA_QualifiedName_init(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_QualifiedName_delete(UA_QualifiedName*)</code><br>
	 * <i>native declaration : open62541.h:771</i>
	 */
	public static void UA_QualifiedName_delete(Pointer<UA_QualifiedName > p) {
		UA_QualifiedName_delete(Pointer.getPeer(p));
	}
	protected native static void UA_QualifiedName_delete(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_QualifiedName_deleteMembers(UA_QualifiedName*)</code><br>
	 * <i>native declaration : open62541.h:773</i>
	 */
	public static void UA_QualifiedName_deleteMembers(Pointer<UA_QualifiedName > p) {
		UA_QualifiedName_deleteMembers(Pointer.getPeer(p));
	}
	protected native static void UA_QualifiedName_deleteMembers(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_QualifiedName_copy(const UA_QualifiedName*, UA_QualifiedName*)</code><br>
	 * <i>native declaration : open62541.h:775</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_QualifiedName_copy(Pointer<UA_QualifiedName > src, Pointer<UA_QualifiedName > dst) {
		return FlagSet.fromValue(UA_QualifiedName_copy(Pointer.getPeer(src), Pointer.getPeer(dst)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_QualifiedName_copy(@Ptr long src, @Ptr long dst);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_LocalizedText* UA_LocalizedText_new()</code><br>
	 * <i>native declaration : open62541.h:777</i>
	 */
	public static Pointer<UA_LocalizedText > UA_LocalizedText_new() {
		return (Pointer)Pointer.pointerToAddress(UA_LocalizedText_new$2(), UA_LocalizedText.class);
	}
	@Ptr 
	@Name("UA_LocalizedText_new") 
	protected native static long UA_LocalizedText_new$2();
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_LocalizedText_init(UA_LocalizedText*)</code><br>
	 * <i>native declaration : open62541.h:779</i>
	 */
	public static void UA_LocalizedText_init(Pointer<UA_LocalizedText > p) {
		UA_LocalizedText_init(Pointer.getPeer(p));
	}
	protected native static void UA_LocalizedText_init(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_LocalizedText_delete(UA_LocalizedText*)</code><br>
	 * <i>native declaration : open62541.h:781</i>
	 */
	public static void UA_LocalizedText_delete(Pointer<UA_LocalizedText > p) {
		UA_LocalizedText_delete(Pointer.getPeer(p));
	}
	protected native static void UA_LocalizedText_delete(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_LocalizedText_deleteMembers(UA_LocalizedText*)</code><br>
	 * <i>native declaration : open62541.h:783</i>
	 */
	public static void UA_LocalizedText_deleteMembers(Pointer<UA_LocalizedText > p) {
		UA_LocalizedText_deleteMembers(Pointer.getPeer(p));
	}
	protected native static void UA_LocalizedText_deleteMembers(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_LocalizedText_copy(const UA_LocalizedText*, UA_LocalizedText*)</code><br>
	 * <i>native declaration : open62541.h:785</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_LocalizedText_copy(Pointer<UA_LocalizedText > src, Pointer<UA_LocalizedText > dst) {
		return FlagSet.fromValue(UA_LocalizedText_copy(Pointer.getPeer(src), Pointer.getPeer(dst)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_LocalizedText_copy(@Ptr long src, @Ptr long dst);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_ExtensionObject* UA_ExtensionObject_new()</code><br>
	 * <i>native declaration : open62541.h:787</i>
	 */
	public static Pointer<UA_ExtensionObject > UA_ExtensionObject_new() {
		return (Pointer)Pointer.pointerToAddress(UA_ExtensionObject_new$2(), UA_ExtensionObject.class);
	}
	@Ptr 
	@Name("UA_ExtensionObject_new") 
	protected native static long UA_ExtensionObject_new$2();
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_ExtensionObject_init(UA_ExtensionObject*)</code><br>
	 * <i>native declaration : open62541.h:789</i>
	 */
	public static void UA_ExtensionObject_init(Pointer<UA_ExtensionObject > p) {
		UA_ExtensionObject_init(Pointer.getPeer(p));
	}
	protected native static void UA_ExtensionObject_init(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_ExtensionObject_delete(UA_ExtensionObject*)</code><br>
	 * <i>native declaration : open62541.h:791</i>
	 */
	public static void UA_ExtensionObject_delete(Pointer<UA_ExtensionObject > p) {
		UA_ExtensionObject_delete(Pointer.getPeer(p));
	}
	protected native static void UA_ExtensionObject_delete(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_ExtensionObject_deleteMembers(UA_ExtensionObject*)</code><br>
	 * <i>native declaration : open62541.h:793</i>
	 */
	public static void UA_ExtensionObject_deleteMembers(Pointer<UA_ExtensionObject > p) {
		UA_ExtensionObject_deleteMembers(Pointer.getPeer(p));
	}
	protected native static void UA_ExtensionObject_deleteMembers(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_ExtensionObject_copy(const UA_ExtensionObject*, UA_ExtensionObject*)</code><br>
	 * <i>native declaration : open62541.h:795</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_ExtensionObject_copy(Pointer<UA_ExtensionObject > src, Pointer<UA_ExtensionObject > dst) {
		return FlagSet.fromValue(UA_ExtensionObject_copy(Pointer.getPeer(src), Pointer.getPeer(dst)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_ExtensionObject_copy(@Ptr long src, @Ptr long dst);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_DataValue* UA_DataValue_new()</code><br>
	 * <i>native declaration : open62541.h:797</i>
	 */
	public static Pointer<UA_DataValue > UA_DataValue_new() {
		return (Pointer)Pointer.pointerToAddress(UA_DataValue_new$2(), UA_DataValue.class);
	}
	@Ptr 
	@Name("UA_DataValue_new") 
	protected native static long UA_DataValue_new$2();
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_DataValue_init(UA_DataValue*)</code><br>
	 * <i>native declaration : open62541.h:799</i>
	 */
	public static void UA_DataValue_init(Pointer<UA_DataValue > p) {
		UA_DataValue_init(Pointer.getPeer(p));
	}
	protected native static void UA_DataValue_init(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_DataValue_delete(UA_DataValue*)</code><br>
	 * <i>native declaration : open62541.h:801</i>
	 */
	public static void UA_DataValue_delete(Pointer<UA_DataValue > p) {
		UA_DataValue_delete(Pointer.getPeer(p));
	}
	protected native static void UA_DataValue_delete(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_DataValue_deleteMembers(UA_DataValue*)</code><br>
	 * <i>native declaration : open62541.h:803</i>
	 */
	public static void UA_DataValue_deleteMembers(Pointer<UA_DataValue > p) {
		UA_DataValue_deleteMembers(Pointer.getPeer(p));
	}
	protected native static void UA_DataValue_deleteMembers(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_DataValue_copy(const UA_DataValue*, UA_DataValue*)</code><br>
	 * <i>native declaration : open62541.h:805</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_DataValue_copy(Pointer<UA_DataValue > src, Pointer<UA_DataValue > dst) {
		return FlagSet.fromValue(UA_DataValue_copy(Pointer.getPeer(src), Pointer.getPeer(dst)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_DataValue_copy(@Ptr long src, @Ptr long dst);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_Variant* UA_Variant_new()</code><br>
	 * <i>native declaration : open62541.h:807</i>
	 */
	public static Pointer<UA_Variant > UA_Variant_new() {
		return (Pointer)Pointer.pointerToAddress(UA_Variant_new$2(), UA_Variant.class);
	}
	@Ptr 
	@Name("UA_Variant_new") 
	protected native static long UA_Variant_new$2();
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_Variant_init(UA_Variant*)</code><br>
	 * <i>native declaration : open62541.h:809</i>
	 */
	public static void UA_Variant_init(Pointer<UA_Variant > p) {
		UA_Variant_init(Pointer.getPeer(p));
	}
	protected native static void UA_Variant_init(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_Variant_delete(UA_Variant*)</code><br>
	 * <i>native declaration : open62541.h:811</i>
	 */
	public static void UA_Variant_delete(Pointer<UA_Variant > p) {
		UA_Variant_delete(Pointer.getPeer(p));
	}
	protected native static void UA_Variant_delete(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_Variant_deleteMembers(UA_Variant*)</code><br>
	 * <i>native declaration : open62541.h:813</i>
	 */
	public static void UA_Variant_deleteMembers(Pointer<UA_Variant > p) {
		UA_Variant_deleteMembers(Pointer.getPeer(p));
	}
	protected native static void UA_Variant_deleteMembers(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_Variant_copy(const UA_Variant*, UA_Variant*)</code><br>
	 * <i>native declaration : open62541.h:815</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_Variant_copy(Pointer<UA_Variant > src, Pointer<UA_Variant > dst) {
		return FlagSet.fromValue(UA_Variant_copy(Pointer.getPeer(src), Pointer.getPeer(dst)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_Variant_copy(@Ptr long src, @Ptr long dst);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_DiagnosticInfo* UA_DiagnosticInfo_new()</code><br>
	 * <i>native declaration : open62541.h:817</i>
	 */
	public static Pointer<UA_DiagnosticInfo > UA_DiagnosticInfo_new() {
		return (Pointer)Pointer.pointerToAddress(UA_DiagnosticInfo_new$2(), UA_DiagnosticInfo.class);
	}
	@Ptr 
	@Name("UA_DiagnosticInfo_new") 
	protected native static long UA_DiagnosticInfo_new$2();
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_DiagnosticInfo_init(UA_DiagnosticInfo*)</code><br>
	 * <i>native declaration : open62541.h:819</i>
	 */
	public static void UA_DiagnosticInfo_init(Pointer<UA_DiagnosticInfo > p) {
		UA_DiagnosticInfo_init(Pointer.getPeer(p));
	}
	protected native static void UA_DiagnosticInfo_init(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_DiagnosticInfo_delete(UA_DiagnosticInfo*)</code><br>
	 * <i>native declaration : open62541.h:821</i>
	 */
	public static void UA_DiagnosticInfo_delete(Pointer<UA_DiagnosticInfo > p) {
		UA_DiagnosticInfo_delete(Pointer.getPeer(p));
	}
	protected native static void UA_DiagnosticInfo_delete(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_DiagnosticInfo_deleteMembers(UA_DiagnosticInfo*)</code><br>
	 * <i>native declaration : open62541.h:823</i>
	 */
	public static void UA_DiagnosticInfo_deleteMembers(Pointer<UA_DiagnosticInfo > p) {
		UA_DiagnosticInfo_deleteMembers(Pointer.getPeer(p));
	}
	protected native static void UA_DiagnosticInfo_deleteMembers(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_DiagnosticInfo_copy(const UA_DiagnosticInfo*, UA_DiagnosticInfo*)</code><br>
	 * <i>native declaration : open62541.h:825</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_DiagnosticInfo_copy(Pointer<UA_DiagnosticInfo > src, Pointer<UA_DiagnosticInfo > dst) {
		return FlagSet.fromValue(UA_DiagnosticInfo_copy(Pointer.getPeer(src), Pointer.getPeer(dst)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_DiagnosticInfo_copy(@Ptr long src, @Ptr long dst);
	/**
	 * Copy a (zero terminated) char-array into a UA_String. Memory for the string data is<br>
	 * allocated. If the memory cannot be allocated, a null-string is returned.<br>
	 * Original signature : <code>__attribute__((dllimport)) UA_String UA_String_fromChars(const char[])</code><br>
	 * <i>native declaration : open62541.h:831</i>
	 */
	public static UA_String UA_String_fromChars(Pointer<Byte > src) {
		return UA_String_fromChars(Pointer.getPeer(src));
	}
	protected native static UA_String UA_String_fromChars(@Ptr long src);
	/**
	 * Printf a char-array into a UA_String. Memory for the string data is allocated.<br>
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_String_copyprintf(const char[], UA_String*, null)</code><br>
	 * <i>native declaration : open62541.h:836</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_String_copyprintf(Pointer<Byte > fmt, Pointer<UA_String > dst, Object... varArgs1) {
		return FlagSet.fromValue(UA_String_copyprintf(Pointer.getPeer(fmt), Pointer.getPeer(dst), varArgs1), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_String_copyprintf(@Ptr long fmt, @Ptr long dst, Object... varArgs1);
	/**
	 * Compares two strings<br>
	 * Original signature : <code>__attribute__((dllimport)) UA_Boolean UA_String_equal(const UA_String*, const UA_String*)</code><br>
	 * <i>native declaration : open62541.h:841</i>
	 */
	public static boolean UA_String_equal(Pointer<UA_String > string1, Pointer<UA_String > string2) {
		return UA_String_equal(Pointer.getPeer(string1), Pointer.getPeer(string2));
	}
	protected native static boolean UA_String_equal(@Ptr long string1, @Ptr long string2);
	/**
	 * Compares an UA String with a char array<br>
	 * Original signature : <code>__attribute__((dllimport)) UA_Boolean UA_String_equalchars(const UA_String*, char*)</code><br>
	 * <i>native declaration : open62541.h:846</i>
	 */
	public static boolean UA_String_equalchars(Pointer<UA_String > string1, Pointer<Byte > charString) {
		return UA_String_equalchars(Pointer.getPeer(string1), Pointer.getPeer(charString));
	}
	protected native static boolean UA_String_equalchars(@Ptr long string1, @Ptr long charString);
	/**
	 * Returns the current time<br>
	 * Original signature : <code>__attribute__((dllimport)) UA_DateTime UA_DateTime_now()</code><br>
	 * <i>native declaration : open62541.h:851</i>
	 */
	public static native long UA_DateTime_now();
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_DateTimeStruct UA_DateTime_toStruct(UA_DateTime)</code><br>
	 * <i>native declaration : open62541.h:864</i>
	 */
	public static native UA_DateTimeStruct UA_DateTime_toStruct(long time);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_DateTime_toString(UA_DateTime, UA_String*)</code><br>
	 * <i>native declaration : open62541.h:866</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_DateTime_toString(long time, Pointer<UA_String > timeString) {
		return FlagSet.fromValue(UA_DateTime_toString(time, Pointer.getPeer(timeString)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_DateTime_toString(long time, @Ptr long timeString);
	/**
	 * Compares two guids<br>
	 * Original signature : <code>__attribute__((dllimport)) UA_Boolean UA_Guid_equal(const UA_Guid*, const UA_Guid*)</code><br>
	 * <i>native declaration : open62541.h:871</i>
	 */
	public static boolean UA_Guid_equal(Pointer<UA_Guid > g1, Pointer<UA_Guid > g2) {
		return UA_Guid_equal(Pointer.getPeer(g1), Pointer.getPeer(g2));
	}
	protected native static boolean UA_Guid_equal(@Ptr long g1, @Ptr long g2);
	/**
	 * Returns a randomly generated guid. Do not use for security-critical entropy!<br>
	 * Original signature : <code>__attribute__((dllimport)) UA_Guid UA_Guid_random(UA_UInt32*)</code><br>
	 * <i>native declaration : open62541.h:876</i>
	 */
	public static UA_Guid UA_Guid_random(Pointer<Integer > seed) {
		return UA_Guid_random(Pointer.getPeer(seed));
	}
	protected native static UA_Guid UA_Guid_random(@Ptr long seed);
	/**
	 * Allocates memory of size length for the bytestring. The content is not set to zero.<br>
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_ByteString_newMembers(UA_ByteString*, UA_Int32)</code><br>
	 * <i>native declaration : open62541.h:881</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_ByteString_newMembers(Pointer<UA_String > p, int length) {
		return FlagSet.fromValue(UA_ByteString_newMembers(Pointer.getPeer(p), length), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_ByteString_newMembers(@Ptr long p, int length);
	/**
	 * Compares two nodeids<br>
	 * Original signature : <code>__attribute__((dllimport)) UA_Boolean UA_NodeId_equal(const UA_NodeId*, const UA_NodeId*)</code><br>
	 * <i>native declaration : open62541.h:886</i>
	 */
	public static boolean UA_NodeId_equal(Pointer<UA_NodeId > n1, Pointer<UA_NodeId > n2) {
		return UA_NodeId_equal(Pointer.getPeer(n1), Pointer.getPeer(n2));
	}
	protected native static boolean UA_NodeId_equal(@Ptr long n1, @Ptr long n2);
	/**
	 * Is the nodeid a null-nodeid?<br>
	 * Original signature : <code>__attribute__((dllimport)) UA_Boolean UA_NodeId_isNull(const UA_NodeId*)</code><br>
	 * <i>native declaration : open62541.h:891</i>
	 */
	public static boolean UA_NodeId_isNull(Pointer<UA_NodeId > p) {
		return UA_NodeId_isNull(Pointer.getPeer(p));
	}
	protected native static boolean UA_NodeId_isNull(@Ptr long p);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_NodeId UA_NodeId_fromInteger(UA_UInt16, UA_Int32)</code><br>
	 * <i>native declaration : open62541.h:893</i>
	 */
	public static native UA_NodeId UA_NodeId_fromInteger(short nsIndex, int identifier);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_NodeId UA_NodeId_fromCharString(UA_UInt16, char[])</code><br>
	 * <i>native declaration : open62541.h:895</i>
	 */
	public static UA_NodeId UA_NodeId_fromCharString(short nsIndex, Pointer<Byte > identifier) {
		return UA_NodeId_fromCharString(nsIndex, Pointer.getPeer(identifier));
	}
	protected native static UA_NodeId UA_NodeId_fromCharString(short nsIndex, @Ptr long identifier);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_NodeId UA_NodeId_fromCharStringCopy(UA_UInt16, const char[])</code><br>
	 * <i>native declaration : open62541.h:897</i>
	 */
	public static UA_NodeId UA_NodeId_fromCharStringCopy(short nsIndex, Pointer<Byte > identifier) {
		return UA_NodeId_fromCharStringCopy(nsIndex, Pointer.getPeer(identifier));
	}
	protected native static UA_NodeId UA_NodeId_fromCharStringCopy(short nsIndex, @Ptr long identifier);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_NodeId UA_NodeId_fromString(UA_UInt16, UA_String)</code><br>
	 * <i>native declaration : open62541.h:899</i>
	 */
	public static native UA_NodeId UA_NodeId_fromString(short nsIndex, UA_String identifier);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_NodeId UA_NodeId_fromStringCopy(UA_UInt16, UA_String)</code><br>
	 * <i>native declaration : open62541.h:901</i>
	 */
	public static native UA_NodeId UA_NodeId_fromStringCopy(short nsIndex, UA_String identifier);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_NodeId UA_NodeId_fromGuid(UA_UInt16, UA_Guid)</code><br>
	 * <i>native declaration : open62541.h:903</i>
	 */
	public static native UA_NodeId UA_NodeId_fromGuid(short nsIndex, UA_Guid identifier);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_NodeId UA_NodeId_fromCharByteString(UA_UInt16, char[])</code><br>
	 * <i>native declaration : open62541.h:905</i>
	 */
	public static UA_NodeId UA_NodeId_fromCharByteString(short nsIndex, Pointer<Byte > identifier) {
		return UA_NodeId_fromCharByteString(nsIndex, Pointer.getPeer(identifier));
	}
	protected native static UA_NodeId UA_NodeId_fromCharByteString(short nsIndex, @Ptr long identifier);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_NodeId UA_NodeId_fromCharByteStringCopy(UA_UInt16, const char[])</code><br>
	 * <i>native declaration : open62541.h:907</i>
	 */
	public static UA_NodeId UA_NodeId_fromCharByteStringCopy(short nsIndex, Pointer<Byte > identifier) {
		return UA_NodeId_fromCharByteStringCopy(nsIndex, Pointer.getPeer(identifier));
	}
	protected native static UA_NodeId UA_NodeId_fromCharByteStringCopy(short nsIndex, @Ptr long identifier);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_NodeId UA_NodeId_fromByteString(UA_UInt16, UA_ByteString)</code><br>
	 * <i>native declaration : open62541.h:909</i>
	 */
	public static native UA_NodeId UA_NodeId_fromByteString(short nsIndex, UA_String identifier);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_NodeId UA_NodeId_fromByteStringCopy(UA_UInt16, UA_ByteString)</code><br>
	 * <i>native declaration : open62541.h:911</i>
	 */
	public static native UA_NodeId UA_NodeId_fromByteStringCopy(short nsIndex, UA_String identifier);
	/**
	 * ExpandedNodeId<br>
	 * Original signature : <code>__attribute__((dllimport)) UA_Boolean UA_ExpandedNodeId_isNull(const UA_ExpandedNodeId*)</code><br>
	 * <i>native declaration : open62541.h:916</i>
	 */
	public static boolean UA_ExpandedNodeId_isNull(Pointer<UA_ExpandedNodeId > p) {
		return UA_ExpandedNodeId_isNull(Pointer.getPeer(p));
	}
	protected native static boolean UA_ExpandedNodeId_isNull(@Ptr long p);
	/**
	 * Returns true if the variant contains a scalar value. Note that empty variants contain an array of<br>
	 * length -1 (undefined).<br>
	 * @param v The variant<br>
	 * @return Does the variant contain a scalar value.<br>
	 * Original signature : <code>__attribute__((dllimport)) UA_Boolean UA_Variant_isScalar(const UA_Variant*)</code><br>
	 * <i>native declaration : open62541.h:924</i>
	 */
	public static boolean UA_Variant_isScalar(Pointer<UA_Variant > v) {
		return UA_Variant_isScalar(Pointer.getPeer(v));
	}
	protected native static boolean UA_Variant_isScalar(@Ptr long v);
	/**
	 * Set the variant to a scalar value that already resides in memory. The value takes on the<br>
	 * lifecycle of the variant and is deleted with it.<br>
	 * @param v The variant<br>
	 * @param p A pointer to the value data<br>
	 * @param type The datatype of the value in question<br>
	 * @return Indicates whether the operation succeeded or returns an error code<br>
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_Variant_setScalar(UA_Variant*, void*, const UA_DataType*)</code><br>
	 * <i>native declaration : open62541.h:934</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_Variant_setScalar(Pointer<UA_Variant > v, Pointer<? > p, Pointer<UA_DataType > type) {
		return FlagSet.fromValue(UA_Variant_setScalar(Pointer.getPeer(v), Pointer.getPeer(p), Pointer.getPeer(type)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_Variant_setScalar(@Ptr long v, @Ptr long p, @Ptr long type);
	/**
	 * Set the variant to a scalar value that is copied from an existing variable.<br>
	 * @param v The variant<br>
	 * @param p A pointer to the value data<br>
	 * @param type The datatype of the value<br>
	 * @return Indicates whether the operation succeeded or returns an error code<br>
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_Variant_setScalarCopy(UA_Variant*, const void*, const UA_DataType*)</code><br>
	 * <i>native declaration : open62541.h:943</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_Variant_setScalarCopy(Pointer<UA_Variant > v, Pointer<? > p, Pointer<UA_DataType > type) {
		return FlagSet.fromValue(UA_Variant_setScalarCopy(Pointer.getPeer(v), Pointer.getPeer(p), Pointer.getPeer(type)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_Variant_setScalarCopy(@Ptr long v, @Ptr long p, @Ptr long type);
	/**
	 * Set the variant to an array that already resides in memory. The array takes on the lifecycle of<br>
	 * the variant and is deleted with it.<br>
	 * @param v The variant<br>
	 * @param array A pointer to the array data<br>
	 * @param noElements The size of the array<br>
	 * @param type The datatype of the array<br>
	 * @return Indicates whether the operation succeeded or returns an error code<br>
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_Variant_setArray(UA_Variant*, void*, UA_Int32, const UA_DataType*)</code><br>
	 * <i>native declaration : open62541.h:954</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_Variant_setArray(Pointer<UA_Variant > v, Pointer<? > array, int noElements, Pointer<UA_DataType > type) {
		return FlagSet.fromValue(UA_Variant_setArray(Pointer.getPeer(v), Pointer.getPeer(array), noElements, Pointer.getPeer(type)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_Variant_setArray(@Ptr long v, @Ptr long array, int noElements, @Ptr long type);
	/**
	 * Set the variant to an array that is copied from an existing array.<br>
	 * @param v The variant<br>
	 * @param array A pointer to the array data<br>
	 * @param noElements The size of the array<br>
	 * @param type The datatype of the array<br>
	 * @return Indicates whether the operation succeeded or returns an error code<br>
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_Variant_setArrayCopy(UA_Variant*, const void*, UA_Int32, const UA_DataType*)</code><br>
	 * <i>native declaration : open62541.h:964</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_Variant_setArrayCopy(Pointer<UA_Variant > v, Pointer<? > array, int noElements, Pointer<UA_DataType > type) {
		return FlagSet.fromValue(UA_Variant_setArrayCopy(Pointer.getPeer(v), Pointer.getPeer(array), noElements, Pointer.getPeer(type)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_Variant_setArrayCopy(@Ptr long v, @Ptr long array, int noElements, @Ptr long type);
	/**
	 * Copy the variant, but use only a subset of the (multidimensional) array into a variant. Returns<br>
	 * an error code if the variant is not an array or if the indicated range does not fit.<br>
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_Variant_copyRange(const UA_Variant*, UA_Variant*, UA_NumericRange)</code><br>
	 * <i>native declaration : open62541.h:970</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_Variant_copyRange(Pointer<UA_Variant > src, Pointer<UA_Variant > dst, UA_NumericRange range) {
		return FlagSet.fromValue(UA_Variant_copyRange(Pointer.getPeer(src), Pointer.getPeer(dst), range), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_Variant_copyRange(@Ptr long src, @Ptr long dst, UA_NumericRange range);
	/**
	 * Insert a range of data into an existing variant. The data array can't be reused afterwards if it<br>
	 * contains types without a fixed size (e.g. strings) since they take on the lifetime of the<br>
	 * variant.<br>
	 * @param v The variant<br>
	 * @param dataArray The data array. The type must match the variant<br>
	 * @param dataarraySize The length of the data array. This is checked to match the range size.<br>
	 * @param range The range of where the new data is inserted<br>
	 * @return Indicates whether the operation succeeded or returns an error code<br>
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_Variant_setRange(UA_Variant*, void*, UA_Int32, const UA_NumericRange)</code><br>
	 * <i>native declaration : open62541.h:982</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_Variant_setRange(Pointer<UA_Variant > v, Pointer<? > dataArray, int dataArraySize, UA_NumericRange range) {
		return FlagSet.fromValue(UA_Variant_setRange(Pointer.getPeer(v), Pointer.getPeer(dataArray), dataArraySize, range), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_Variant_setRange(@Ptr long v, @Ptr long dataArray, int dataArraySize, UA_NumericRange range);
	/**
	 * Deep-copy a range of data into an existing variant.<br>
	 * @param v The variant<br>
	 * @param dataArray The data array. The type must match the variant<br>
	 * @param dataarraySize The length of the data array. This is checked to match the range size.<br>
	 * @param range The range of where the new data is inserted<br>
	 * @return Indicates whether the operation succeeded or returns an error code<br>
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_Variant_setRangeCopy(UA_Variant*, const void*, UA_Int32, const UA_NumericRange)</code><br>
	 * <i>native declaration : open62541.h:992</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_Variant_setRangeCopy(Pointer<UA_Variant > v, Pointer<? > dataArray, int dataArraySize, UA_NumericRange range) {
		return FlagSet.fromValue(UA_Variant_setRangeCopy(Pointer.getPeer(v), Pointer.getPeer(dataArray), dataArraySize, range), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_Variant_setRangeCopy(@Ptr long v, @Ptr long dataArray, int dataArraySize, UA_NumericRange range);
	/**
	 * Allocates and initializes a variable of type dataType<br>
	 * @param dataType The datatype description<br>
	 * @return Returns the memory location of the variable or (void*)0 if no memory is available<br>
	 * Original signature : <code>__attribute__((dllimport)) void* UA_new(const UA_DataType*)</code><br>
	 * <i>native declaration : open62541.h:1031</i>
	 */
	public static Pointer<? > UA_new(Pointer<UA_DataType > dataType) {
		return Pointer.pointerToAddress(UA_new(Pointer.getPeer(dataType)));
	}
	@Ptr 
	protected native static long UA_new(@Ptr long dataType);
	/**
	 * Initializes a variable to default values<br>
	 * @param p The memory location of the variable<br>
	 * @param dataType The datatype description<br>
	 * Original signature : <code>__attribute__((dllimport)) void UA_init(void*, const UA_DataType*)</code><br>
	 * <i>native declaration : open62541.h:1038</i>
	 */
	public static void UA_init(Pointer<? > p, Pointer<UA_DataType > dataType) {
		UA_init(Pointer.getPeer(p), Pointer.getPeer(dataType));
	}
	protected native static void UA_init(@Ptr long p, @Ptr long dataType);
	/**
	 * Copies the content of two variables. If copying fails (e.g. because no memory was available for<br>
	 * an array), then dst is emptied and initialized to prevent memory leaks.<br>
	 * @param src The memory location of the source variable<br>
	 * @param dst The memory location of the destination variable<br>
	 * @param dataType The datatype description<br>
	 * @return Indicates whether the operation succeeded or returns an error code<br>
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_copy(const void*, void*, const UA_DataType*)</code><br>
	 * <i>native declaration : open62541.h:1048</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_copy(Pointer<? > src, Pointer<? > dst, Pointer<UA_DataType > dataType) {
		return FlagSet.fromValue(UA_copy(Pointer.getPeer(src), Pointer.getPeer(dst), Pointer.getPeer(dataType)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_copy(@Ptr long src, @Ptr long dst, @Ptr long dataType);
	/**
	 * Deletes the dynamically assigned content of a variable (e.g. a member-array). Afterwards, the<br>
	 * variable can be safely deleted without causing memory leaks. But the variable is not initialized<br>
	 * and may contain old data that is not memory-relevant.<br>
	 * @param p The memory location of the variable<br>
	 * @param dataType The datatype description of the variable<br>
	 * Original signature : <code>__attribute__((dllimport)) void UA_deleteMembers(void*, const UA_DataType*)</code><br>
	 * <i>native declaration : open62541.h:1057</i>
	 */
	public static void UA_deleteMembers(Pointer<? > p, Pointer<UA_DataType > dataType) {
		UA_deleteMembers(Pointer.getPeer(p), Pointer.getPeer(dataType));
	}
	protected native static void UA_deleteMembers(@Ptr long p, @Ptr long dataType);
	/**
	 * Deletes (frees) a variable and all of its content.<br>
	 * @param p The memory location of the variable<br>
	 * @param dataType The datatype description of the variable<br>
	 * Original signature : <code>__attribute__((dllimport)) void UA_delete(void*, const UA_DataType*)</code><br>
	 * <i>native declaration : open62541.h:1064</i>
	 */
	public static void UA_delete(Pointer<? > p, Pointer<UA_DataType > dataType) {
		UA_delete(Pointer.getPeer(p), Pointer.getPeer(dataType));
	}
	protected native static void UA_delete(@Ptr long p, @Ptr long dataType);
	/**
	 * Allocates and initializes an array of variables of a specific type<br>
	 * @param dataType The datatype description<br>
	 * @return Returns the memory location of the variable or (void*)0 if no memory could be allocated<br>
	 * Original signature : <code>__attribute__((dllimport)) void* UA_Array_new(const UA_DataType*, UA_Int32)</code><br>
	 * <i>native declaration : open62541.h:1071</i>
	 */
	public static Pointer<? > UA_Array_new(Pointer<UA_DataType > dataType, int noElements) {
		return Pointer.pointerToAddress(UA_Array_new(Pointer.getPeer(dataType), noElements));
	}
	@Ptr 
	protected native static long UA_Array_new(@Ptr long dataType, int noElements);
	/**
	 * Allocates and copies an array. dst is set to (void*)0 if not enough memory is available.<br>
	 * @param src The memory location of the souce array<br>
	 * @param dst The memory location where the pointer to the destination array is written<br>
	 * @param dataType The datatype of the array members<br>
	 * @param noElements The size of the array<br>
	 * @return Indicates whether the operation succeeded or returns an error code<br>
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_Array_copy(const void*, void**, const UA_DataType*, UA_Int32)</code><br>
	 * <i>native declaration : open62541.h:1081</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_Array_copy(Pointer<? > src, Pointer<Pointer<? > > dst, Pointer<UA_DataType > dataType, int noElements) {
		return FlagSet.fromValue(UA_Array_copy(Pointer.getPeer(src), Pointer.getPeer(dst), Pointer.getPeer(dataType), noElements), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_Array_copy(@Ptr long src, @Ptr long dst, @Ptr long dataType, int noElements);
	/**
	 * Deletes an array.<br>
	 * @param src The memory location of the array<br>
	 * @param dataType The datatype of the array members<br>
	 * @param noElements The size of the array<br>
	 * Original signature : <code>__attribute__((dllimport)) void UA_Array_delete(void*, const UA_DataType*, UA_Int32)</code><br>
	 * <i>native declaration : open62541.h:1089</i>
	 */
	public static void UA_Array_delete(Pointer<? > p, Pointer<UA_DataType > dataType, int noElements) {
		UA_Array_delete(Pointer.getPeer(p), Pointer.getPeer(dataType), noElements);
	}
	protected native static void UA_Array_delete(@Ptr long p, @Ptr long dataType, int noElements);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_Connection_init(UA_Connection*)</code><br>
	 * <i>native declaration : open62541.h:1933</i>
	 */
	public static void UA_Connection_init(Pointer<UA_Connection > connection) {
		UA_Connection_init(Pointer.getPeer(connection));
	}
	protected native static void UA_Connection_init(@Ptr long connection);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_Connection_deleteMembers(UA_Connection*)</code><br>
	 * <i>native declaration : open62541.h:1935</i>
	 */
	public static void UA_Connection_deleteMembers(Pointer<UA_Connection > connection) {
		UA_Connection_deleteMembers(Pointer.getPeer(connection));
	}
	protected native static void UA_Connection_deleteMembers(@Ptr long connection);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_Connection_detachSecureChannel(UA_Connection*)</code><br>
	 * <i>native declaration : open62541.h:1937</i>
	 */
	public static void UA_Connection_detachSecureChannel(Pointer<UA_Connection > connection) {
		UA_Connection_detachSecureChannel(Pointer.getPeer(connection));
	}
	protected native static void UA_Connection_detachSecureChannel(@Ptr long connection);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_Connection_attachSecureChannel(UA_Connection*, UA_SecureChannel*)</code><br>
	 * <i>native declaration : open62541.h:1939</i>
	 */
	public static void UA_Connection_attachSecureChannel(Pointer<UA_Connection > connection, Pointer<Open62541ExtLibrary.UA_SecureChannel > channel) {
		UA_Connection_attachSecureChannel(Pointer.getPeer(connection), Pointer.getPeer(channel));
	}
	protected native static void UA_Connection_attachSecureChannel(@Ptr long connection, @Ptr long channel);
	/**
	 * Returns a string of complete message (the length entry is decoded for that).<br>
	 * If the received message is incomplete, it is retained in the connection.<br>
	 * Original signature : <code>__attribute__((dllimport)) UA_ByteString UA_Connection_completeMessages(UA_Connection*, UA_ByteString)</code><br>
	 * <i>native declaration : open62541.h:1945</i>
	 */
	public static UA_String UA_Connection_completeMessages(Pointer<UA_Connection > connection, UA_String received) {
		return UA_Connection_completeMessages(Pointer.getPeer(connection), received);
	}
	protected native static UA_String UA_Connection_completeMessages(@Ptr long connection, UA_String received);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_Server* UA_Server_new(UA_ServerConfig)</code><br>
	 * <i>native declaration : open62541.h:1987</i>
	 */
	public static Pointer<UA_Server > UA_Server_new(UA_ServerConfig config) {
		return (Pointer)Pointer.pointerToAddress(UA_Server_new$2(config), UA_Server.class);
	}
	@Ptr 
	@Name("UA_Server_new") 
	protected native static long UA_Server_new$2(UA_ServerConfig config);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_Server_setServerCertificate(UA_Server*, UA_ByteString)</code><br>
	 * <i>native declaration : open62541.h:1989</i>
	 */
	public static void UA_Server_setServerCertificate(Pointer<UA_Server > server, UA_String certificate) {
		UA_Server_setServerCertificate(Pointer.getPeer(server), certificate);
	}
	protected native static void UA_Server_setServerCertificate(@Ptr long server, UA_String certificate);
	/**
	 * Original signature : <code>__attribute__((dllimport)) void UA_Server_delete(UA_Server*)</code><br>
	 * <i>native declaration : open62541.h:1991</i>
	 */
	public static void UA_Server_delete(Pointer<UA_Server > server) {
		UA_Server_delete(Pointer.getPeer(server));
	}
	protected native static void UA_Server_delete(@Ptr long server);
	/**
	 * Sets the logger used by the server<br>
	 * Original signature : <code>__attribute__((dllimport)) void UA_Server_setLogger(UA_Server*, UA_Logger)</code><br>
	 * <i>native declaration : open62541.h:1996</i>
	 */
	public static void UA_Server_setLogger(Pointer<UA_Server > server, Pointer<Open62541ExtLibrary.UA_Logger > logger) {
		UA_Server_setLogger(Pointer.getPeer(server), Pointer.getPeer(logger));
	}
	protected native static void UA_Server_setLogger(@Ptr long server, @Ptr long logger);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_Logger UA_Server_getLogger(UA_Server*)</code><br>
	 * <i>native declaration : open62541.h:1998</i>
	 */
	public static Pointer<Open62541ExtLibrary.UA_Logger > UA_Server_getLogger(Pointer<UA_Server > server) {
		return (Pointer)Pointer.pointerToAddress(UA_Server_getLogger(Pointer.getPeer(server)), Open62541ExtLibrary.UA_Logger.class);
	}
	@Ptr 
	protected native static long UA_Server_getLogger(@Ptr long server);
	/**
	 * Runs the main loop of the server. In each iteration, this calls into the<br>
	 * networklayers to see if work have arrived and checks if timed events need to<br>
	 * be triggered.<br>
	 * @param server The server object<br>
	 * @param nThreads The number of worker threads. Is ignored if MULTITHREADING is<br>
	 * not activated.<br>
	 * @param running Points to a booloean value on the heap. When running is set to<br>
	 * false, the worker threads and the main loop close and the server is shut<br>
	 * down.<br>
	 * @return Indicates whether the server shut down cleanly<br>
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_Server_run(UA_Server*, UA_UInt16, UA_Boolean*)</code><br>
	 * <i>native declaration : open62541.h:2012</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_Server_run(Pointer<UA_Server > server, short nThreads, Pointer<Boolean > running) {
		return FlagSet.fromValue(UA_Server_run(Pointer.getPeer(server), nThreads, Pointer.getPeer(running)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_Server_run(@Ptr long server, short nThreads, @Ptr long running);
	/**
	 * The prologue part of UA_Server_run (no need to use if you call UA_Server_run)<br>
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_Server_run_startup(UA_Server*, UA_UInt16, UA_Boolean*)</code><br>
	 * <i>native declaration : open62541.h:2017</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_Server_run_startup(Pointer<UA_Server > server, short nThreads, Pointer<Boolean > running) {
		return FlagSet.fromValue(UA_Server_run_startup(Pointer.getPeer(server), nThreads, Pointer.getPeer(running)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_Server_run_startup(@Ptr long server, short nThreads, @Ptr long running);
	/**
	 * The epilogue part of UA_Server_run (no need to use if you call UA_Server_run)<br>
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_Server_run_shutdown(UA_Server*, UA_UInt16)</code><br>
	 * <i>native declaration : open62541.h:2022</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_Server_run_shutdown(Pointer<UA_Server > server, short nThreads) {
		return FlagSet.fromValue(UA_Server_run_shutdown(Pointer.getPeer(server), nThreads), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_Server_run_shutdown(@Ptr long server, short nThreads);
	/**
	 * One iteration of UA_Server_run (no need to use if you call UA_Server_run)<br>
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_Server_run_getAndProcessWork(UA_Server*, UA_Boolean*)</code><br>
	 * <i>native declaration : open62541.h:2027</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_Server_run_getAndProcessWork(Pointer<UA_Server > server, Pointer<Boolean > running) {
		return FlagSet.fromValue(UA_Server_run_getAndProcessWork(Pointer.getPeer(server), Pointer.getPeer(running)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_Server_run_getAndProcessWork(@Ptr long server, @Ptr long running);
	/**
	 * @brief Add a new namespace to the server. Returns the index of the new namespace<br>
	 * Original signature : <code>__attribute__((dllimport)) UA_UInt16 UA_Server_addNamespace(UA_Server*, const char*)</code><br>
	 * <i>native declaration : open62541.h:2050</i>
	 */
	public static short UA_Server_addNamespace(Pointer<UA_Server > server, Pointer<Byte > name) {
		return UA_Server_addNamespace(Pointer.getPeer(server), Pointer.getPeer(name));
	}
	protected native static short UA_Server_addNamespace(@Ptr long server, @Ptr long name);
	/**
	 * Add a reference to the server's address space<br>
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_Server_addReference(UA_Server*, const UA_AddReferencesItem*)</code><br>
	 * <i>native declaration : open62541.h:2055</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_Server_addReference(Pointer<UA_Server > server, Pointer<UA_AddReferencesItem > item) {
		return FlagSet.fromValue(UA_Server_addReference(Pointer.getPeer(server), Pointer.getPeer(item)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_Server_addReference(@Ptr long server, @Ptr long item);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_Server_addVariableNode(UA_Server*, UA_Variant*, const UA_QualifiedName, UA_NodeId, const UA_NodeId, const UA_NodeId)</code><br>
	 * <i>native declaration : open62541.h:2057</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_Server_addVariableNode(Pointer<UA_Server > server, Pointer<UA_Variant > value, UA_QualifiedName browseName, UA_NodeId nodeId, UA_NodeId parentNodeId, UA_NodeId referenceTypeId) {
		return FlagSet.fromValue(UA_Server_addVariableNode(Pointer.getPeer(server), Pointer.getPeer(value), browseName, nodeId, parentNodeId, referenceTypeId), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_Server_addVariableNode(@Ptr long server, @Ptr long value, UA_QualifiedName browseName, UA_NodeId nodeId, UA_NodeId parentNodeId, UA_NodeId referenceTypeId);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_Server_addObjectNode(UA_Server*, const UA_QualifiedName, UA_NodeId, const UA_NodeId, const UA_NodeId, const UA_NodeId)</code><br>
	 * <i>native declaration : open62541.h:2059</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_Server_addObjectNode(Pointer<UA_Server > server, UA_QualifiedName browseName, UA_NodeId nodeId, UA_NodeId parentNodeId, UA_NodeId referenceTypeId, UA_NodeId typeDefinition) {
		return FlagSet.fromValue(UA_Server_addObjectNode(Pointer.getPeer(server), browseName, nodeId, parentNodeId, referenceTypeId, typeDefinition), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_Server_addObjectNode(@Ptr long server, UA_QualifiedName browseName, UA_NodeId nodeId, UA_NodeId parentNodeId, UA_NodeId referenceTypeId, UA_NodeId typeDefinition);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_Server_addDataSourceVariableNode(UA_Server*, UA_DataSource, const UA_QualifiedName, UA_NodeId, const UA_NodeId, const UA_NodeId)</code><br>
	 * <i>native declaration : open62541.h:2061</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_Server_addDataSourceVariableNode(Pointer<UA_Server > server, UA_DataSource dataSource, UA_QualifiedName browseName, UA_NodeId nodeId, UA_NodeId parentNodeId, UA_NodeId referenceTypeId) {
		return FlagSet.fromValue(UA_Server_addDataSourceVariableNode(Pointer.getPeer(server), dataSource, browseName, nodeId, parentNodeId, referenceTypeId), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_Server_addDataSourceVariableNode(@Ptr long server, UA_DataSource dataSource, UA_QualifiedName browseName, UA_NodeId nodeId, UA_NodeId parentNodeId, UA_NodeId referenceTypeId);
	/**
	 * @param server The server object.<br>
	 * @param work Pointer to the WorkItem that shall be added. The pointer is not<br>
	 *        freed but copied to an internal representation.<br>
	 * @param executionTime The time when the work shall be executed. If the time lies in the<br>
	 *        past, the work will be executed in the next iteration of the server's<br>
	 *        main loop<br>
	 * @param resultWorkGuid Upon success, the pointed value is set to the guid of<br>
	 *        the workitem in the server queue. This can be used to cancel the work<br>
	 *        later on. If the pointer is null, the guid is not set.<br>
	 * @return Upon sucess, UA_STATUSCODE_GOOD is returned. An error code otherwise.<br>
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_Server_addTimedWorkItem(UA_Server*, const UA_WorkItem*, UA_DateTime, UA_Guid*)</code><br>
	 * <i>native declaration : open62541.h:2101</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_Server_addTimedWorkItem(Pointer<UA_Server > server, Pointer<UA_WorkItem > work, long executionTime, Pointer<UA_Guid > resultWorkGuid) {
		return FlagSet.fromValue(UA_Server_addTimedWorkItem(Pointer.getPeer(server), Pointer.getPeer(work), executionTime, Pointer.getPeer(resultWorkGuid)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_Server_addTimedWorkItem(@Ptr long server, @Ptr long work, long executionTime, @Ptr long resultWorkGuid);
	/**
	 * @param server The server object.<br>
	 * @param work Pointer to the WorkItem that shall be added. The pointer is not<br>
	 *        freed but copied to an internal representation.<br>
	 * @param interval The work that is executed repeatedly with the given interval<br>
	 *        (in ms). If work with the same repetition interval already exists,<br>
	 *        the first execution might occur sooner.<br>
	 * @param resultWorkGuid Upon success, the pointed value is set to the guid of<br>
	 *        the workitem in the server queue. This can be used to cancel the work<br>
	 *        later on. If the pointer is null, the guid is not set.<br>
	 * @return Upon sucess, UA_STATUSCODE_GOOD is returned. An error code otherwise.<br>
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_Server_addRepeatedWorkItem(UA_Server*, const UA_WorkItem*, UA_UInt32, UA_Guid*)</code><br>
	 * <i>native declaration : open62541.h:2115</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_Server_addRepeatedWorkItem(Pointer<UA_Server > server, Pointer<UA_WorkItem > work, int interval, Pointer<UA_Guid > resultWorkGuid) {
		return FlagSet.fromValue(UA_Server_addRepeatedWorkItem(Pointer.getPeer(server), Pointer.getPeer(work), interval, Pointer.getPeer(resultWorkGuid)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_Server_addRepeatedWorkItem(@Ptr long server, @Ptr long work, int interval, @Ptr long resultWorkGuid);
	/**
	 * Adds a network layer to the server. The network layer is destroyed together<br>
	 * with the server. Do not use it after adding it as it might be moved around on<br>
	 * the heap.<br>
	 * Original signature : <code>__attribute__((dllimport)) void UA_Server_addNetworkLayer(UA_Server*, UA_ServerNetworkLayer)</code><br>
	 * <i>native declaration : open62541.h:2141</i>
	 */
	public static void UA_Server_addNetworkLayer(Pointer<UA_Server > server, UA_ServerNetworkLayer networkLayer) {
		UA_Server_addNetworkLayer(Pointer.getPeer(server), networkLayer);
	}
	protected native static void UA_Server_addNetworkLayer(@Ptr long server, UA_ServerNetworkLayer networkLayer);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_Client* UA_Client_new(UA_ClientConfig, UA_Logger)</code><br>
	 * <i>native declaration : open62541.h:2162</i>
	 */
	public static Pointer<Open62541ExtLibrary.UA_Client > UA_Client_new(UA_ClientConfig config, Pointer<Open62541ExtLibrary.UA_Logger > logger) {
		return (Pointer)Pointer.pointerToAddress(UA_Client_new(config, Pointer.getPeer(logger)), Open62541ExtLibrary.UA_Client.class);
	}
	@Ptr 
	protected native static long UA_Client_new(UA_ClientConfig config, @Ptr long logger);
	/**
	 * Original signature : <code>void UA_Client_delete(UA_Client*)</code><br>
	 * <i>native declaration : open62541.h:2164</i>
	 */
	public static void UA_Client_delete(Pointer<Open62541ExtLibrary.UA_Client > client) {
		UA_Client_delete(Pointer.getPeer(client));
	}
	protected native static void UA_Client_delete(@Ptr long client);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_Client_connect(UA_Client*, UA_ConnectClientConnection, char*)</code><br>
	 * <i>native declaration : open62541.h:2166</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_Client_connect(Pointer<Open62541ExtLibrary.UA_Client > client, Pointer<Open62541ExtLibrary.UA_ConnectClientConnection > connFunc, Pointer<Byte > endpointUrl) {
		return FlagSet.fromValue(UA_Client_connect(Pointer.getPeer(client), Pointer.getPeer(connFunc), Pointer.getPeer(endpointUrl)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_Client_connect(@Ptr long client, @Ptr long connFunc, @Ptr long endpointUrl);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_Client_disconnect(UA_Client*)</code><br>
	 * <i>native declaration : open62541.h:2168</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_Client_disconnect(Pointer<Open62541ExtLibrary.UA_Client > client) {
		return FlagSet.fromValue(UA_Client_disconnect(Pointer.getPeer(client)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_Client_disconnect(@Ptr long client);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_StatusCode UA_Client_renewSecureChannel(UA_Client*)</code><br>
	 * <i>native declaration : open62541.h:2170</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > UA_Client_renewSecureChannel(Pointer<Open62541ExtLibrary.UA_Client > client) {
		return FlagSet.fromValue(UA_Client_renewSecureChannel(Pointer.getPeer(client)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int UA_Client_renewSecureChannel(@Ptr long client);
	/**
	 * Attribute Service Set<br>
	 * Original signature : <code>__attribute__((dllimport)) UA_ReadResponse UA_Client_read(UA_Client*, UA_ReadRequest*)</code><br>
	 * <i>native declaration : open62541.h:2175</i>
	 */
	public static UA_ReadResponse UA_Client_read(Pointer<Open62541ExtLibrary.UA_Client > client, Pointer<UA_ReadRequest > request) {
		return UA_Client_read(Pointer.getPeer(client), Pointer.getPeer(request));
	}
	protected native static UA_ReadResponse UA_Client_read(@Ptr long client, @Ptr long request);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_WriteResponse UA_Client_write(UA_Client*, UA_WriteRequest*)</code><br>
	 * <i>native declaration : open62541.h:2177</i>
	 */
	public static UA_WriteResponse UA_Client_write(Pointer<Open62541ExtLibrary.UA_Client > client, Pointer<UA_WriteRequest > request) {
		return UA_Client_write(Pointer.getPeer(client), Pointer.getPeer(request));
	}
	protected native static UA_WriteResponse UA_Client_write(@Ptr long client, @Ptr long request);
	/**
	 * View Service Set<br>
	 * Original signature : <code>__attribute__((dllimport)) UA_BrowseResponse UA_Client_browse(UA_Client*, UA_BrowseRequest*)</code><br>
	 * <i>native declaration : open62541.h:2182</i>
	 */
	public static UA_BrowseResponse UA_Client_browse(Pointer<Open62541ExtLibrary.UA_Client > client, Pointer<UA_BrowseRequest > request) {
		return UA_Client_browse(Pointer.getPeer(client), Pointer.getPeer(request));
	}
	protected native static UA_BrowseResponse UA_Client_browse(@Ptr long client, @Ptr long request);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_BrowseNextResponse UA_Client_browseNext(UA_Client*, UA_BrowseNextRequest*)</code><br>
	 * <i>native declaration : open62541.h:2184</i>
	 */
	public static UA_BrowseNextResponse UA_Client_browseNext(Pointer<Open62541ExtLibrary.UA_Client > client, Pointer<UA_BrowseNextRequest > request) {
		return UA_Client_browseNext(Pointer.getPeer(client), Pointer.getPeer(request));
	}
	protected native static UA_BrowseNextResponse UA_Client_browseNext(@Ptr long client, @Ptr long request);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_TranslateBrowsePathsToNodeIdsResponse UA_Client_translateTranslateBrowsePathsToNodeIds(UA_Client*, UA_TranslateBrowsePathsToNodeIdsRequest*)</code><br>
	 * <i>native declaration : open62541.h:2186</i>
	 */
	public static UA_TranslateBrowsePathsToNodeIdsResponse UA_Client_translateTranslateBrowsePathsToNodeIds(Pointer<Open62541ExtLibrary.UA_Client > client, Pointer<UA_TranslateBrowsePathsToNodeIdsRequest > request) {
		return UA_Client_translateTranslateBrowsePathsToNodeIds(Pointer.getPeer(client), Pointer.getPeer(request));
	}
	protected native static UA_TranslateBrowsePathsToNodeIdsResponse UA_Client_translateTranslateBrowsePathsToNodeIds(@Ptr long client, @Ptr long request);
	/**
	 * NodeManagement Service Set<br>
	 * Original signature : <code>__attribute__((dllimport)) UA_AddNodesResponse UA_Client_addNodes(UA_Client*, UA_AddNodesRequest*)</code><br>
	 * <i>native declaration : open62541.h:2191</i>
	 */
	public static UA_AddNodesResponse UA_Client_addNodes(Pointer<Open62541ExtLibrary.UA_Client > client, Pointer<UA_AddNodesRequest > request) {
		return UA_Client_addNodes(Pointer.getPeer(client), Pointer.getPeer(request));
	}
	protected native static UA_AddNodesResponse UA_Client_addNodes(@Ptr long client, @Ptr long request);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_AddReferencesResponse UA_Client_addReferences(UA_Client*, UA_AddReferencesRequest*)</code><br>
	 * <i>native declaration : open62541.h:2193</i>
	 */
	public static UA_AddReferencesResponse UA_Client_addReferences(Pointer<Open62541ExtLibrary.UA_Client > client, Pointer<UA_AddReferencesRequest > request) {
		return UA_Client_addReferences(Pointer.getPeer(client), Pointer.getPeer(request));
	}
	protected native static UA_AddReferencesResponse UA_Client_addReferences(@Ptr long client, @Ptr long request);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_DeleteNodesResponse UA_Client_deleteNodes(UA_Client*, UA_DeleteNodesRequest*)</code><br>
	 * <i>native declaration : open62541.h:2195</i>
	 */
	public static UA_DeleteNodesResponse UA_Client_deleteNodes(Pointer<Open62541ExtLibrary.UA_Client > client, Pointer<UA_DeleteNodesRequest > request) {
		return UA_Client_deleteNodes(Pointer.getPeer(client), Pointer.getPeer(request));
	}
	protected native static UA_DeleteNodesResponse UA_Client_deleteNodes(@Ptr long client, @Ptr long request);
	/**
	 * Original signature : <code>__attribute__((dllimport)) UA_DeleteReferencesResponse UA_Client_deleteReferences(UA_Client*, UA_DeleteReferencesRequest*)</code><br>
	 * <i>native declaration : open62541.h:2197</i>
	 */
	public static UA_DeleteReferencesResponse UA_Client_deleteReferences(Pointer<Open62541ExtLibrary.UA_Client > client, Pointer<UA_DeleteReferencesRequest > request) {
		return UA_Client_deleteReferences(Pointer.getPeer(client), Pointer.getPeer(request));
	}
	protected native static UA_DeleteReferencesResponse UA_Client_deleteReferences(@Ptr long client, @Ptr long request);
	/**
	 * @brief Create the TCP networklayer and listen to the specified port<br>
	 * Original signature : <code>UA_ServerNetworkLayer ServerNetworkLayerTCP_new(UA_ConnectionConfig, UA_UInt32)</code><br>
	 * <i>native declaration : open62541.h:2204</i>
	 */
	public static native UA_ServerNetworkLayer ServerNetworkLayerTCP_new(UA_ConnectionConfig conf, int port);
	/**
	 * Original signature : <code>UA_Connection ClientNetworkLayerTCP_connect(char*, UA_Logger*)</code><br>
	 * <i>native declaration : open62541.h:2206</i>
	 */
	public static UA_Connection ClientNetworkLayerTCP_connect(Pointer<Byte > endpointUrl, Pointer<Pointer<Open62541ExtLibrary.UA_Logger > > logger) {
		return ClientNetworkLayerTCP_connect(Pointer.getPeer(endpointUrl), Pointer.getPeer(logger));
	}
	protected native static UA_Connection ClientNetworkLayerTCP_connect(@Ptr long endpointUrl, @Ptr long logger);
	/**
	 * Initialises the logger for the current thread.<br>
	 * Original signature : <code>UA_Logger Logger_Stdout_new()</code><br>
	 * <i>native declaration : open62541.h:4</i>
	 */
	public static Pointer<Open62541ExtLibrary.UA_Logger > Logger_Stdout_new() {
		return (Pointer)Pointer.pointerToAddress(Logger_Stdout_new$2(), Open62541ExtLibrary.UA_Logger.class);
	}
	@Ptr 
	@Name("Logger_Stdout_new") 
	protected native static long Logger_Stdout_new$2();
	/**
	 * create and free client memory<br>
	 * Original signature : <code>UA_Client* createClient()</code><br>
	 * <i>native declaration : wrapper62541.h:8</i>
	 */
	public static Pointer<Open62541ExtLibrary.UA_Client > createClient() {
		return (Pointer)Pointer.pointerToAddress(createClient$2(), Open62541ExtLibrary.UA_Client.class);
	}
	@Ptr 
	@Name("createClient") 
	protected native static long createClient$2();
	/**
	 * Original signature : <code>void deleteClient(UA_Client*)</code><br>
	 * <i>native declaration : wrapper62541.h:10</i>
	 */
	public static void deleteClient(Pointer<Open62541ExtLibrary.UA_Client > client) {
		deleteClient(Pointer.getPeer(client));
	}
	protected native static void deleteClient(@Ptr long client);
	/**
	 * connect and disconnect a client<br>
	 * Original signature : <code>UA_StatusCode connectClient(UA_Client*, char*)</code><br>
	 * <i>native declaration : wrapper62541.h:15</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > connectClient(Pointer<Open62541ExtLibrary.UA_Client > client, Pointer<Byte > endpointUrl) {
		return FlagSet.fromValue(connectClient(Pointer.getPeer(client), Pointer.getPeer(endpointUrl)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int connectClient(@Ptr long client, @Ptr long endpointUrl);
	/**
	 * Original signature : <code>UA_StatusCode disconnectClient(UA_Client*)</code><br>
	 * <i>native declaration : wrapper62541.h:17</i>
	 */
	public static IntValuedEnum<Open62541ExtLibrary.UA_StatusCode > disconnectClient(Pointer<Open62541ExtLibrary.UA_Client > client) {
		return FlagSet.fromValue(disconnectClient(Pointer.getPeer(client)), Open62541ExtLibrary.UA_StatusCode.class);
	}
	protected native static int disconnectClient(@Ptr long client);
	/**
	 * blocking read and free read response memory<br>
	 * Original signature : <code>UA_ReadResponse* synchRead(UA_Client*, UA_NodeId*)</code><br>
	 * <i>native declaration : wrapper62541.h:22</i>
	 */
	public static Pointer<UA_ReadResponse > synchRead(Pointer<Open62541ExtLibrary.UA_Client > client, Pointer<UA_NodeId > nodeId) {
		return (Pointer)Pointer.pointerToAddress(synchRead(Pointer.getPeer(client), Pointer.getPeer(nodeId)), UA_ReadResponse.class);
	}
	@Ptr 
	protected native static long synchRead(@Ptr long client, @Ptr long nodeId);
	/**
	 * Original signature : <code>void deleteReadResponse(UA_ReadResponse*)</code><br>
	 * <i>native declaration : wrapper62541.h:24</i>
	 */
	public static void deleteReadResponse(Pointer<UA_ReadResponse > readResponse) {
		deleteReadResponse(Pointer.getPeer(readResponse));
	}
	protected native static void deleteReadResponse(@Ptr long readResponse);
	/**
	 * blocking write and free write response memory<br>
	 * Original signature : <code>UA_WriteResponse* synchWrite(UA_Client*, UA_NodeId*, UA_Variant*)</code><br>
	 * <i>native declaration : wrapper62541.h:29</i>
	 */
	public static Pointer<UA_WriteResponse > synchWrite(Pointer<Open62541ExtLibrary.UA_Client > client, Pointer<UA_NodeId > nodeId, Pointer<UA_Variant > value) {
		return (Pointer)Pointer.pointerToAddress(synchWrite(Pointer.getPeer(client), Pointer.getPeer(nodeId), Pointer.getPeer(value)), UA_WriteResponse.class);
	}
	@Ptr 
	protected native static long synchWrite(@Ptr long client, @Ptr long nodeId, @Ptr long value);
	/**
	 * Original signature : <code>void deleteWriteResponse(UA_WriteResponse*)</code><br>
	 * <i>native declaration : wrapper62541.h:31</i>
	 */
	public static void deleteWriteResponse(Pointer<UA_WriteResponse > writeResponse) {
		deleteWriteResponse(Pointer.getPeer(writeResponse));
	}
	protected native static void deleteWriteResponse(@Ptr long writeResponse);
	/**
	 * browse a node and free the browse response memory<br>
	 * Original signature : <code>UA_BrowseResponse* browseNode(UA_Client*, UA_NodeId*)</code><br>
	 * <i>native declaration : wrapper62541.h:36</i>
	 */
	public static Pointer<UA_BrowseResponse > browseNode(Pointer<Open62541ExtLibrary.UA_Client > client, Pointer<UA_NodeId > nodeId) {
		return (Pointer)Pointer.pointerToAddress(browseNode(Pointer.getPeer(client), Pointer.getPeer(nodeId)), UA_BrowseResponse.class);
	}
	@Ptr 
	protected native static long browseNode(@Ptr long client, @Ptr long nodeId);
	/**
	 * Original signature : <code>void deleteBrowseResponse(UA_BrowseResponse*)</code><br>
	 * <i>native declaration : wrapper62541.h:38</i>
	 */
	public static void deleteBrowseResponse(Pointer<UA_BrowseResponse > browseResponse) {
		deleteBrowseResponse(Pointer.getPeer(browseResponse));
	}
	protected native static void deleteBrowseResponse(@Ptr long browseResponse);
	/**
	 * create node IDs and free their memory<br>
	 * Original signature : <code>UA_NodeId* createNumericNodeId(UA_UInt16, UA_Int32)</code><br>
	 * <i>native declaration : wrapper62541.h:43</i>
	 */
	public static Pointer<UA_NodeId > createNumericNodeId(short nsIndex, int identifier) {
		return (Pointer)Pointer.pointerToAddress(createNumericNodeId$2(nsIndex, identifier), UA_NodeId.class);
	}
	@Ptr 
	@Name("createNumericNodeId") 
	protected native static long createNumericNodeId$2(short nsIndex, int identifier);
	/**
	 * Original signature : <code>UA_NodeId* createCharNodeId(UA_UInt16, const char[])</code><br>
	 * <i>native declaration : wrapper62541.h:45</i>
	 */
	public static Pointer<UA_NodeId > createCharNodeId(short nsIndex, Pointer<Byte > identifier) {
		return (Pointer)Pointer.pointerToAddress(createCharNodeId(nsIndex, Pointer.getPeer(identifier)), UA_NodeId.class);
	}
	@Ptr 
	protected native static long createCharNodeId(short nsIndex, @Ptr long identifier);
	/**
	 * Original signature : <code>UA_NodeId* createStringNodeId(UA_UInt16, UA_String*)</code><br>
	 * <i>native declaration : wrapper62541.h:47</i>
	 */
	public static Pointer<UA_NodeId > createStringNodeId(short nsIndex, Pointer<UA_String > identifier) {
		return (Pointer)Pointer.pointerToAddress(createStringNodeId(nsIndex, Pointer.getPeer(identifier)), UA_NodeId.class);
	}
	@Ptr 
	protected native static long createStringNodeId(short nsIndex, @Ptr long identifier);
	/**
	 * Original signature : <code>void deleteNodeId(UA_NodeId*)</code><br>
	 * <i>native declaration : wrapper62541.h:49</i>
	 */
	public static void deleteNodeId(Pointer<UA_NodeId > nodeId) {
		deleteNodeId(Pointer.getPeer(nodeId));
	}
	protected native static void deleteNodeId(@Ptr long nodeId);
	/**
	 * create a scalar variant and free the memory<br>
	 * Original signature : <code>UA_Variant* createScalarVariant(UA_UInt16, void*)</code><br>
	 * <i>native declaration : wrapper62541.h:54</i>
	 */
	public static Pointer<UA_Variant > createScalarVariant(short dataType, Pointer<? > value) {
		return (Pointer)Pointer.pointerToAddress(createScalarVariant(dataType, Pointer.getPeer(value)), UA_Variant.class);
	}
	@Ptr 
	protected native static long createScalarVariant(short dataType, @Ptr long value);
	/**
	 * Original signature : <code>void deleteVariant(UA_Variant*)</code><br>
	 * <i>native declaration : wrapper62541.h:56</i>
	 */
	public static void deleteVariant(Pointer<UA_Variant > variant) {
		deleteVariant(Pointer.getPeer(variant));
	}
	protected native static void deleteVariant(@Ptr long variant);
	/**
	 * create a date & time struct and free the memory<br>
	 * Original signature : <code>UA_DateTimeStruct* createDateTimeStruct(UA_DateTime)</code><br>
	 * <i>native declaration : wrapper62541.h:61</i>
	 */
	public static Pointer<UA_DateTimeStruct > createDateTimeStruct(long time) {
		return (Pointer)Pointer.pointerToAddress(createDateTimeStruct$2(time), UA_DateTimeStruct.class);
	}
	@Ptr 
	@Name("createDateTimeStruct") 
	protected native static long createDateTimeStruct$2(long time);
	/**
	 * Original signature : <code>void deleteDateTimeStruct(UA_DateTimeStruct*)</code><br>
	 * <i>native declaration : wrapper62541.h:63</i>
	 */
	public static void deleteDateTimeStruct(Pointer<UA_DateTimeStruct > value) {
		deleteDateTimeStruct(Pointer.getPeer(value));
	}
	protected native static void deleteDateTimeStruct(@Ptr long value);
	/**
	 * @ingroup types<br>
	 * @defgroup ua_types_generated Autogenerated ua_types Types<br>
	 * @brief Data structures that are autogenerated from an XML-Schema.<br>
	 * @{<br>
	 * C type : extern __attribute__((dllimport)) const UA_DataType*
	 */
	public Pointer<UA_DataType > UA_TYPES() {
		try {
			return (Pointer<UA_DataType >)BridJ.getNativeLibrary("Open62541Ext").getSymbolPointer("UA_TYPES").as(DefaultParameterizedType.paramType(Pointer.class, UA_DataType.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * @ingroup types<br>
	 * @defgroup ua_types_generated Autogenerated ua_types Types<br>
	 * @brief Data structures that are autogenerated from an XML-Schema.<br>
	 * @{<br>
	 * C type : extern __attribute__((dllimport)) const UA_DataType*
	 */
	public Open62541ExtLibrary UA_TYPES(Pointer<UA_DataType > UA_TYPES) {
		try {
			{
				BridJ.getNativeLibrary("Open62541Ext").getSymbolPointer("UA_TYPES").as(DefaultParameterizedType.paramType(Pointer.class, UA_DataType.class)).set(UA_TYPES);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : extern const __attribute__((dllimport)) UA_ConnectionConfig */
	public UA_ConnectionConfig UA_ConnectionConfig_standard() {
		try {
			return (UA_ConnectionConfig)BridJ.getNativeLibrary("Open62541Ext").getSymbolPointer("UA_ConnectionConfig_standard").as(UA_ConnectionConfig.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : extern const __attribute__((dllimport)) UA_ConnectionConfig */
	public Open62541ExtLibrary UA_ConnectionConfig_standard(UA_ConnectionConfig UA_ConnectionConfig_standard) {
		try {
			{
				BridJ.getNativeLibrary("Open62541Ext").getSymbolPointer("UA_ConnectionConfig_standard").as(UA_ConnectionConfig.class).set(UA_ConnectionConfig_standard);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : extern __attribute__((dllimport)) const UA_ServerConfig */
	public UA_ServerConfig UA_ServerConfig_standard() {
		try {
			return (UA_ServerConfig)BridJ.getNativeLibrary("Open62541Ext").getSymbolPointer("UA_ServerConfig_standard").as(UA_ServerConfig.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : extern __attribute__((dllimport)) const UA_ServerConfig */
	public Open62541ExtLibrary UA_ServerConfig_standard(UA_ServerConfig UA_ServerConfig_standard) {
		try {
			{
				BridJ.getNativeLibrary("Open62541Ext").getSymbolPointer("UA_ServerConfig_standard").as(UA_ServerConfig.class).set(UA_ServerConfig_standard);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : extern __attribute__((dllimport)) const UA_ClientConfig */
	public UA_ClientConfig UA_ClientConfig_standard() {
		try {
			return (UA_ClientConfig)BridJ.getNativeLibrary("Open62541Ext").getSymbolPointer("UA_ClientConfig_standard").as(UA_ClientConfig.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : extern __attribute__((dllimport)) const UA_ClientConfig */
	public Open62541ExtLibrary UA_ClientConfig_standard(UA_ClientConfig UA_ClientConfig_standard) {
		try {
			{
				BridJ.getNativeLibrary("Open62541Ext").getSymbolPointer("UA_ClientConfig_standard").as(UA_ClientConfig.class).set(UA_ClientConfig_standard);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** Undefined type */
	public static interface UA_SecureChannel {
		
	};
	/** Undefined type */
	public static interface UA_Client {
		
	};
}

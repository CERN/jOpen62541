package org.point85.open62541;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.BridJ;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * <i>native declaration : open62541.h:580</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("Open62541Ext") 
public class UA_Variant extends StructObject {
	static {
		BridJ.register();
	}
	/** C type : const UA_DataType* */
	@Field(0) 
	public Pointer<UA_DataType > type() {
		return this.io.getPointerField(this, 0);
	}
	/** C type : const UA_DataType* */
	@Field(0) 
	public UA_Variant type(Pointer<UA_DataType > type) {
		this.io.setPointerField(this, 0, type);
		return this;
	}
	/** C type : storageType_enum */
	@Field(1) 
	public IntValuedEnum<UA_Variant.storageType_enum > storageType() {
		return this.io.getEnumField(this, 1);
	}
	/** C type : storageType_enum */
	@Field(1) 
	public UA_Variant storageType(IntValuedEnum<UA_Variant.storageType_enum > storageType) {
		this.io.setEnumField(this, 1, storageType);
		return this;
	}
	/**
	 * < the number of elements in the data-pointer<br>
	 * C type : UA_Int32
	 */
	@Field(2) 
	public int arrayLength() {
		return this.io.getIntField(this, 2);
	}
	/**
	 * < the number of elements in the data-pointer<br>
	 * C type : UA_Int32
	 */
	@Field(2) 
	public UA_Variant arrayLength(int arrayLength) {
		this.io.setIntField(this, 2, arrayLength);
		return this;
	}
	/**
	 * < points to the scalar or array data<br>
	 * C type : void*
	 */
	@Field(3) 
	public Pointer<? > data() {
		return this.io.getPointerField(this, 3);
	}
	/**
	 * < points to the scalar or array data<br>
	 * C type : void*
	 */
	@Field(3) 
	public UA_Variant data(Pointer<? > data) {
		this.io.setPointerField(this, 3, data);
		return this;
	}
	/**
	 * < the number of dimensions the data-array has<br>
	 * C type : UA_Int32
	 */
	@Field(4) 
	public int arrayDimensionsSize() {
		return this.io.getIntField(this, 4);
	}
	/**
	 * < the number of dimensions the data-array has<br>
	 * C type : UA_Int32
	 */
	@Field(4) 
	public UA_Variant arrayDimensionsSize(int arrayDimensionsSize) {
		this.io.setIntField(this, 4, arrayDimensionsSize);
		return this;
	}
	/**
	 * < the length of each dimension of the data-array<br>
	 * C type : UA_Int32*
	 */
	@Field(5) 
	public Pointer<Integer > arrayDimensions() {
		return this.io.getPointerField(this, 5);
	}
	/**
	 * < the length of each dimension of the data-array<br>
	 * C type : UA_Int32*
	 */
	@Field(5) 
	public UA_Variant arrayDimensions(Pointer<Integer > arrayDimensions) {
		this.io.setPointerField(this, 5, arrayDimensions);
		return this;
	}
	/**
	 * enum values<br>
	 * <i>native declaration : open62541.h:579</i>
	 */
	public enum storageType_enum implements IntValuedEnum<storageType_enum > {
		/** < The data is "owned" by this variant (copied and deleted together) */
		UA_VARIANT_DATA(0),
		/**
		 * < The data is "borrowed" by the variant and shall not be<br>
		 * deleted at the end of this variant's lifecycle. It is not<br>
		 * possible to overwrite borrowed data due to concurrent access.<br>
		 * Use a custom datasource with a mutex.
		 */
		UA_VARIANT_DATA_NODELETE(1);
		storageType_enum(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<storageType_enum > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<storageType_enum > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public UA_Variant() {
		super();
	}
	public UA_Variant(Pointer pointer) {
		super(pointer);
	}
}
